export default class MockAlgoliaSearch {
  constructor() {}

  async saveObjects(_docs: any[]) {
    return [];
  }

  async findObject(_searchPredicate: (hit: any) => boolean) {
    return {
      object: {
        title: 'Mock Title',
        description: 'Mock description for search result.',
        parentSection: 'Developers',
        content: '',
        modified: 1679479425.939279,
        group: 'developers',
        viewed: 72,
        objectID: 'developers|rewards|managing-rewards',
      },
      position: 7,
      page: 0,
    };
  }

  async updateObjectsPartially(_objs: any[], _createIfNotExists: boolean = true) {
    return {
      taskIDs: [2255124430002],
      objectIDs: ['developers|rewards|managing-rewards'],
    };
  }

  async search(_query: string, _filters?: string) {
    return {
      exhaustive: { nbHits: true, typo: true },
      exhaustiveNbHits: true,
      exhaustiveTypo: true,
      hitsPerPage: 1000,
      hits: mockSearchResults,
      nbHits: 10,
      nbPages: 1,
      page: 0,
      params: '',
      processingTimeMS: 17,
      processingTimingsMS: {
        afterFetch: {
          format: { highlighting: 14, total: 16 },
          total: 17,
        },
        request: { roundTrip: 128 },
        total: 17,
      },
      query: '',
      renderingContent: {},
      serverTimeMS: 18,
    };
  }
}

export const mockSearchResults = [
  {
    title: 'Run a Validator Node',
    description: 'Learn how to set up a Validator Node',
    parentSection: 'Run a node',
    content:
      '# Running a Validator Node\n\nThis guide shows how to set up a node, run that node and create your validator.\n\nYou will need to use the [Networks page](../../resources/networks) to find information like the `<chain-id>` and `<rpc-url>` of the network you would like to connect to.\n\n## Running your validator\n\nThe first step is to run a node. See the [Node Installation](../running-a-node/prerequisites) and [Joining a Network](../running-a-node/join-a-network) guides for instructions on how to get your node up and running.\n\nAfter your node is running and synced, you can create a validator by staking tokens.\n\n\n::alert{variant="info"}\nPlease note that the Constantine test network is currently not open to additional validators. Stay tuned on <a href="https://discordapp.com/channels/892203409418092615/901065455165399070" target="_blank">Discord</a> for further updates on this topic.\n\n#title\nINFO\n::\n\n\nAnyways, you can still run a node on Constantine (without validating) or validate in a [local testnet](5.running-a-local-testnet.md)\n\n\n\n## Run a validator pre-genesis\n\nFirstly, make sure you have properly [installed and configured your node](../running-a-node/install).\n\n\nIn order to set up a validator before the genesis block, a genesis transaction that includes your validator account is needed.\n\nYou can add the genesis account by setting the number of coins to stake:\n\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd add-genesis-account \\\n  "$(archwayd keys show my-validator-account -a)" \\\n  1000000000stake,1000000000ARCH\n```\n\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<network-name> \\\n  add-genesis-account <my-validator-account> 1000000000stake,1000000000ARCH\n```\n\n::\n\n::\n\n\n\n\n\n::alert{variant="info"}\nYour account must have an equal amount of coins that match the bond denomination (`"bond_denom"`) in your genesis file.\n::highlight-card\n\n```json\n// genesis.json\n"staking": {\n  "params": {\n    "unbonding_time": "1814400s",\n    "max_validators": 100,\n    "max_entries": 7,\n    "historical_entries": 10000,\n    "bond_denom": "aconst" // "aconst" is the bond denomination of Constantine testnet\n  },\n}\n```\n\n::\n\n#title\nINFO\n::\n\n### **Create your validator**\n\n\nTo make the node into a validator, you need to create a validator transaction by running the command below:\n\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd gentx my-validator-account 1000000000stake \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id <chain-id>\n```\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<network-name> \\\n  gentx my-validator-account 1000000000stake \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id <chain-id>\n```\n::\n\n::\n\n\n\n\n### **Add transaction to genesis file**\n\nNow, you can add the generated bonding transaction to the genesis file:\n\n\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd collect-gentxs\n\n```\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<chain-id> \\\n  collect-gentxs\n```\n::\n\n::\n\n\n### **Start validator node**\n\nNow, you can start the validator node:\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd start\n```\n\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<network-name> \\\n  start\n```\n\n::\n::\n<!--\n### **Run your node**\n\nStart your node in the Docker container:\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd start --p2p.seeds AddressN@Host_Name_orIPN:PORT --x-crisis-skip-assert-invariants\n```\n\n::Now, set the number of coins to stake:\n\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<network-name> \\\n  start --p2p.seeds AddressN@Host_Name_orIPN:PORT --x-crisis-skip-assert-invariants\n```\n\n::\n-->\n## Run a validator post-genesis\n\n### **Retrieve the genesis file**\n\nTo retrieve the genesis file, install <a href="https://stedolan.github.io/jq/download/" target="_blank" >jq</a> (lightweight and flexible command-line JSON processor). Run the below command to retrive the genesis file:\n\n\n```bash\ncurl -s "<rpc-url>/genesis" | jq \'.result.genesis\' > ~/.archway/config/genesis.json\n```\n\nThis will replace the default genesis file with the one connected to the network you are joining.\n\nAfter having followed the [instructions to join a network](../running-a-node/join-a-network) and your running node is synced, you can create a validator by staking tokens. Please make sure to create a validator only once the node is fully synced, so that you avoid being slashed.\n\n\n\n\n::alert{variant="info"}\nIf you ran the previous command in interactive mode, you must run the following command in a separate terminal window. You can also use <a href="https://linuxize.com/post/how-to-use-linux-screen/#install-linux-gnu-screen" target="_blank">screen</a>, to detach your shell from processes by virtual shells\n#title\nINFO\n::\n\nNow, use the following command to create your validator:\n\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd tx staking create-validator \\\n  --from <my-validator-account> \\\n  --amount 1000000000udenom \\\n  --min-self-delegation 1000000000udenom \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id <chain-id>\n```\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<chain-id> \\\n  tx staking create-validator \\\n  --from <my-validator-account> \\\n  --amount 1000000000udenom \\\n  --min-self-delegation 1000000000udenom \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id chain-id>\n```\n::\n\n::\n\n\n\nFor example in the case of Constantine, you can run:\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd tx staking create-validator \\\n  --from cool-validator \\\n  --amount 1000000000aconst \\\n  --min-self-delegation 1000000000aconst \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id constantine-1\n```\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<chain-id> \\\n  tx staking create-validator \\\n  --from cool-validator \\\n  --amount 1000000000udenom \\\n  --min-self-delegation 1000000000udenom \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id <chain-id>\n```\n::\n\n::\n\n## Next Steps\nGreat! Now, make sure you [monitor your validator](4.monitoring-validators.md). Monitoring the validator will help to prevent getting slashed, and ensure higher reliability to your validating operations.',
    modified: 1678275989.415273,
    group: 'validators',
    viewed: 45,
    objectID: 'validators|running-a-validator-node',
    _highlightResult: {
      title: { value: 'Run a Validator Node', matchLevel: 'none', matchedWords: [] },
      description: { value: 'Learn how to set up a Validator Node', matchLevel: 'none', matchedWords: [] },
      content: {
        value:
          '# Running a Validator Node\n\nThis guide shows how to set up a node, run that node and create your validator.\n\nYou will need to use the [Networks page](../../resources/networks) to find information like the `<chain-id>` and `<rpc-url>` of the network you would like to connect to.\n\n## Running your validator\n\nThe first step is to run a node. See the [Node Installation](../running-a-node/prerequisites) and [Joining a Network](../running-a-node/join-a-network) guides for instructions on how to get your node up and running.\n\nAfter your node is running and synced, you can create a validator by staking tokens.\n\n\n::alert{variant="info"}\nPlease note that the Constantine test network is currently not open to additional validators. Stay tuned on <a href="https://discordapp.com/channels/892203409418092615/901065455165399070" target="_blank">Discord</a> for further updates on this topic.\n\n#title\nINFO\n::\n\n\nAnyways, you can still run a node on Constantine (without validating) or validate in a [local testnet](5.running-a-local-testnet.md)\n\n\n\n## Run a validator pre-genesis\n\nFirstly, make sure you have properly [installed and configured your node](../running-a-node/install).\n\n\nIn order to set up a validator before the genesis block, a genesis transaction that includes your validator account is needed.\n\nYou can add the genesis account by setting the number of coins to stake:\n\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd add-genesis-account \\\n  "$(archwayd keys show my-validator-account -a)" \\\n  1000000000stake,1000000000ARCH\n```\n\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<network-name> \\\n  add-genesis-account <my-validator-account> 1000000000stake,1000000000ARCH\n```\n\n::\n\n::\n\n\n\n\n\n::alert{variant="info"}\nYour account must have an equal amount of coins that match the bond denomination (`"bond_denom"`) in your genesis file.\n::highlight-card\n\n```json\n// genesis.json\n"staking": {\n  "params": {\n    "unbonding_time": "1814400s",\n    "max_validators": 100,\n    "max_entries": 7,\n    "historical_entries": 10000,\n    "bond_denom": "aconst" // "aconst" is the bond denomination of Constantine testnet\n  },\n}\n```\n\n::\n\n#title\nINFO\n::\n\n### **Create your validator**\n\n\nTo make the node into a validator, you need to create a validator transaction by running the command below:\n\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd gentx my-validator-account 1000000000stake \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id <chain-id>\n```\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<network-name> \\\n  gentx my-validator-account 1000000000stake \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id <chain-id>\n```\n::\n\n::\n\n\n\n\n### **Add transaction to genesis file**\n\nNow, you can add the generated bonding transaction to the genesis file:\n\n\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd collect-gentxs\n\n```\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<chain-id> \\\n  collect-gentxs\n```\n::\n\n::\n\n\n### **Start validator node**\n\nNow, you can start the validator node:\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd start\n```\n\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<network-name> \\\n  start\n```\n\n::\n::\n<!--\n### **Run your node**\n\nStart your node in the Docker container:\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd start --p2p.seeds AddressN@Host_Name_orIPN:PORT --x-crisis-skip-assert-invariants\n```\n\n::Now, set the number of coins to stake:\n\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<network-name> \\\n  start --p2p.seeds AddressN@Host_Name_orIPN:PORT --x-crisis-skip-assert-invariants\n```\n\n::\n-->\n## Run a validator post-genesis\n\n### **Retrieve the genesis file**\n\nTo retrieve the genesis file, install <a href="https://stedolan.github.io/jq/download/" target="_blank" >jq</a> (lightweight and flexible command-line JSON processor). Run the below command to retrive the genesis file:\n\n\n```bash\ncurl -s "<rpc-url>/genesis" | jq \'.result.genesis\' > ~/.archway/config/genesis.json\n```\n\nThis will replace the default genesis file with the one connected to the network you are joining.\n\nAfter having followed the [instructions to join a network](../running-a-node/join-a-network) and your running node is synced, you can create a validator by staking tokens. Please make sure to create a validator only once the node is fully synced, so that you avoid being slashed.\n\n\n\n\n::alert{variant="info"}\nIf you ran the previous command in interactive mode, you must run the following command in a separate terminal window. You can also use <a href="https://linuxize.com/post/how-to-use-linux-screen/#install-linux-gnu-screen" target="_blank">screen</a>, to detach your shell from processes by virtual shells\n#title\nINFO\n::\n\nNow, use the following command to create your validator:\n\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd tx staking create-validator \\\n  --from <my-validator-account> \\\n  --amount 1000000000udenom \\\n  --min-self-delegation 1000000000udenom \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id <chain-id>\n```\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<chain-id> \\\n  tx staking create-validator \\\n  --from <my-validator-account> \\\n  --amount 1000000000udenom \\\n  --min-self-delegation 1000000000udenom \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id chain-id>\n```\n::\n\n::\n\n\n\nFor example in the case of Constantine, you can run:\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd tx staking create-validator \\\n  --from cool-validator \\\n  --amount 1000000000aconst \\\n  --min-self-delegation 1000000000aconst \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id constantine-1\n```\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<chain-id> \\\n  tx staking create-validator \\\n  --from cool-validator \\\n  --amount 1000000000udenom \\\n  --min-self-delegation 1000000000udenom \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey "$(archwayd tendermint show-validator)" \\\n  --chain-id <chain-id>\n```\n::\n\n::\n\n## Next Steps\nGreat! Now, make sure you [monitor your validator](4.monitoring-validators.md). Monitoring the validator will help to prevent getting slashed, and ensure higher reliability to your validating operations.',
        matchLevel: 'none',
        matchedWords: [],
      },
      modified: { value: '1678275989.415273', matchLevel: 'none', matchedWords: [] },
      viewed: { value: '45', matchLevel: 'none', matchedWords: [] },
    },
  },
  {
    title: 'Node Configuration',
    parentSection: 'Run a node',
    content:
      '# Node Configuration\n\n\nBy default, the **init** command creates your **~/.archway** directory with subfolders **config** and **data**. In the config directory, the most important files for configuration are **app.toml** and **config.toml**. You can configure your node via editing these files.\n\nThe basic configurations are included in this document. For more details about configs, review the **app.toml** and **config.toml** files.\n\n\n\n## `config.toml`\n\nAdjusting the **config.toml** file of a node is an important step in optimizing its performance, security, and reliability.\n\nThe **config.toml** file contains low-level configuration settings for the Cosmos node software, such as network settings, database settings, logging settings, and security settings. These settings are generally used to customize the behavior of the underlying software and are not specific to the Cosmos blockchain.\n\n\n\nThe various parts of the **config.toml** configuration file:\n::highlight-card\n\n```toml\nproxy_app = "<PROTOCOL>://<HOST_ADDRESS>:<PORT>"\n```\n\n::\nProxyApp is the TCP or UNIX socket address of the ABCI application, or the name of an ABCI application compiled in with the binary.\n::highlight-card\n\n```toml\nmoniker = "<A_CUSTOM_NAME>"\n```\n\n::\nMoniker is a custom human-readable name for this node. Make sure that the moniker is unique and descriptive\n::highlight-card\n\n```toml\ngenesis_file = "<PATH_TO_GENESIS_FILE>"\n```\n\n::\nPath to the JSON file that contains the initial validator set and other metadata. This file contains the private key of your validator, which is used to sign blocks and votes. Make sure that this file is stored securely and is not accessible to unauthorized users.\n::highlight-card\n\n```toml\npriv_validator_key_file = "<PATH_TO_VALIDATOR_PRIVATE_KEY>"\n```\n\n::\nPath to the JSON file that contains the private key to use as a validator in the consensus protocol.\n::highlight-card\n\n```toml\n[p2p]\nladdr = "tcp://<IP_ADDRESS>:<PORT>"\n```\n\n::\nwhere **laddr** is the address to listen for incoming connections in the peer-to-peer network.\n\n\n\nAdditional paramteres you may want to configure include:\n- Making sure that the **external_address** is reachable and coherent to your [desired network topology](../becoming-a-validator/requirements#sentry-nodes-ddos-protection) to avoid DoS attacks\n- Connection limits: The **max_open_connections** setting in the config.toml file of the sentry node can be used to limit the number of incoming connections. This can help prevent the node from being overloaded with connections and reduce the risk of a DoS attack. On the other hand, higher **max_open_connections** can improve network connectivity.\n- Adjust the **timeout_commit** setting: This setting determines how long your validator node will wait for other validators to commit a block before considering the block final. Adjusting this value can help optimize block confirmation times.\n- Review the **mempool_cache_size** and **max_txs_bytes settings**: These settings determine the maximum size of the mempool cache and transactions, respectively. Make sure that these values are appropriate for your network\'s transaction volume.\n- Consider setting the **log_level** setting to an appropriate value: This setting determines the level of logging output that your node will generate. Setting this to a lower level can help reduce disk space usage.\n\n## `app.toml`\n\nThe **app.toml** file, contains configuration settings that are specific to the Archway blockchain. These settings are used to configure the behavior of the Cosmos SDK modules that the node runs, such as the staking module, governance module, and so on.\n\nThe various parts of the **app.toml** configuration file:\n::highlight-card\n\n```toml\n[api]\naddress = "tcp://<HOST_NAME>:<PORT>"\n```\n\n::\nwhere address defines the API server to listen on.\n::highlight-card\n\n```toml\n[grpc]\naddress = "tcp://<HOST_NAME>:<PORT>"\n```\n\n::\nwhere address defines the gRPC server address to bind to.\n\nPlease make sure you are fully aware of the changes you are applying. Depending on your needs, you may want to set up the following fields:\n\n<!-- - Adjust the **minimum-gas-prices** setting: This setting determines the minimum gas price that your validator node will accept for processing transactions. Setting this value too low can result in spam attacks, while setting it too high can discourage legitimate transactions. Find a balance that works for the specific network.\nPROBABLY NOT RELEVANT AFTER THE REWARDS MODULE HAS BEEN INTRODUCED-->\n\n- Consider setting the **fast_sync** setting to true: This setting can help your node perform a fast initial sync of the blockchain.\n\n- Set up the **peer-gossip-timeout**: This setting determines how long the node will wait for responses from other nodes on the network. If a node does not respond within this timeout period, it will be considered unreachable.\n\n- Configure the **index-events**: This setting determines which events will be indexed by the node. By default, only a few key events are indexed, but it may be useful to index additional events depending on the needs of the network.\n\n## Next Steps\nYou are ready to go! Now let\'s [join a network](5.join-a-network.md).',
    modified: 1678275989.415273,
    group: 'validators',
    viewed: 32,
    objectID: 'validators|node|configure',
    _highlightResult: {
      title: { value: 'Node Configuration', matchLevel: 'none', matchedWords: [] },
      content: {
        value:
          '# Node Configuration\n\n\nBy default, the **init** command creates your **~/.archway** directory with subfolders **config** and **data**. In the config directory, the most important files for configuration are **app.toml** and **config.toml**. You can configure your node via editing these files.\n\nThe basic configurations are included in this document. For more details about configs, review the **app.toml** and **config.toml** files.\n\n\n\n## `config.toml`\n\nAdjusting the **config.toml** file of a node is an important step in optimizing its performance, security, and reliability.\n\nThe **config.toml** file contains low-level configuration settings for the Cosmos node software, such as network settings, database settings, logging settings, and security settings. These settings are generally used to customize the behavior of the underlying software and are not specific to the Cosmos blockchain.\n\n\n\nThe various parts of the **config.toml** configuration file:\n::highlight-card\n\n```toml\nproxy_app = "<PROTOCOL>://<HOST_ADDRESS>:<PORT>"\n```\n\n::\nProxyApp is the TCP or UNIX socket address of the ABCI application, or the name of an ABCI application compiled in with the binary.\n::highlight-card\n\n```toml\nmoniker = "<A_CUSTOM_NAME>"\n```\n\n::\nMoniker is a custom human-readable name for this node. Make sure that the moniker is unique and descriptive\n::highlight-card\n\n```toml\ngenesis_file = "<PATH_TO_GENESIS_FILE>"\n```\n\n::\nPath to the JSON file that contains the initial validator set and other metadata. This file contains the private key of your validator, which is used to sign blocks and votes. Make sure that this file is stored securely and is not accessible to unauthorized users.\n::highlight-card\n\n```toml\npriv_validator_key_file = "<PATH_TO_VALIDATOR_PRIVATE_KEY>"\n```\n\n::\nPath to the JSON file that contains the private key to use as a validator in the consensus protocol.\n::highlight-card\n\n```toml\n[p2p]\nladdr = "tcp://<IP_ADDRESS>:<PORT>"\n```\n\n::\nwhere **laddr** is the address to listen for incoming connections in the peer-to-peer network.\n\n\n\nAdditional paramteres you may want to configure include:\n- Making sure that the **external_address** is reachable and coherent to your [desired network topology](../becoming-a-validator/requirements#sentry-nodes-ddos-protection) to avoid DoS attacks\n- Connection limits: The **max_open_connections** setting in the config.toml file of the sentry node can be used to limit the number of incoming connections. This can help prevent the node from being overloaded with connections and reduce the risk of a DoS attack. On the other hand, higher **max_open_connections** can improve network connectivity.\n- Adjust the **timeout_commit** setting: This setting determines how long your validator node will wait for other validators to commit a block before considering the block final. Adjusting this value can help optimize block confirmation times.\n- Review the **mempool_cache_size** and **max_txs_bytes settings**: These settings determine the maximum size of the mempool cache and transactions, respectively. Make sure that these values are appropriate for your network\'s transaction volume.\n- Consider setting the **log_level** setting to an appropriate value: This setting determines the level of logging output that your node will generate. Setting this to a lower level can help reduce disk space usage.\n\n## `app.toml`\n\nThe **app.toml** file, contains configuration settings that are specific to the Archway blockchain. These settings are used to configure the behavior of the Cosmos SDK modules that the node runs, such as the staking module, governance module, and so on.\n\nThe various parts of the **app.toml** configuration file:\n::highlight-card\n\n```toml\n[api]\naddress = "tcp://<HOST_NAME>:<PORT>"\n```\n\n::\nwhere address defines the API server to listen on.\n::highlight-card\n\n```toml\n[grpc]\naddress = "tcp://<HOST_NAME>:<PORT>"\n```\n\n::\nwhere address defines the gRPC server address to bind to.\n\nPlease make sure you are fully aware of the changes you are applying. Depending on your needs, you may want to set up the following fields:\n\n<!-- - Adjust the **minimum-gas-prices** setting: This setting determines the minimum gas price that your validator node will accept for processing transactions. Setting this value too low can result in spam attacks, while setting it too high can discourage legitimate transactions. Find a balance that works for the specific network.\nPROBABLY NOT RELEVANT AFTER THE REWARDS MODULE HAS BEEN INTRODUCED-->\n\n- Consider setting the **fast_sync** setting to true: This setting can help your node perform a fast initial sync of the blockchain.\n\n- Set up the **peer-gossip-timeout**: This setting determines how long the node will wait for responses from other nodes on the network. If a node does not respond within this timeout period, it will be considered unreachable.\n\n- Configure the **index-events**: This setting determines which events will be indexed by the node. By default, only a few key events are indexed, but it may be useful to index additional events depending on the needs of the network.\n\n## Next Steps\nYou are ready to go! Now let\'s [join a network](5.join-a-network.md).',
        matchLevel: 'none',
        matchedWords: [],
      },
      modified: { value: '1678275989.415273', matchLevel: 'none', matchedWords: [] },
      viewed: { value: '32', matchLevel: 'none', matchedWords: [] },
    },
  },
  {
    title: 'Running a Local Testnet',
    description: 'Learn how to set up a local Archway network',
    parentSection: 'Run a node',
    content:
      '# Running a Local Testnet\n\nThis guide explains how to run a local Archway testnet. If you have not installed an Archway node before, please follow this [guide here](../running-a-node/prerequisites).\n\n\n\n## Create the required directories\n\nTo have a working test network we need at least two validator nodes.\n\nFirst, let\'s create a directory to keep all nodes\' data in an organized way:\n::highlight-card\n\n```bash\nmkdir testnet\ncd testnet\n```\n\n::\n\nSince we will create two nodes in this testnet, let\'s:\n\nCreate a directory for the first node that will call **node1**.\n\n::highlight-card\n```bash\nmkdir -p node1\n```\n::\n\n\n\nCreate a directory for the second node, that we will call **node2**:\n::highlight-card\n\n```bash\nmkdir -p node2\n```\n\n::\n\n\n\n## Initialize the first node\n\n\n\nFrom the **testnet** folder, get inside the **node1** folder with:\n::highlight-card\n```bash\ncd node1\n```\n::\n\nInitiate **node1** with the chain name:\n\n::highlight-card\n```bash\narchwayd init node1 --chain-id my-chain --home ./node1\n```\n::\n\n\nYou will see something similar after running the command:\n\n::highlight-card\n```bash\n{"app_message":{"auth":{"accounts":[],"params":{"max_memo_characters":"256","sig_verify_cost_ed25519":"590","sig_verify_cost_secp256k1":"1000","tx_sig_limit":"7","tx_size_cost_per_byte":"10"}},"authz":{"authorization":[]},"bank":{"balances":[],"denom_metadata":[],"params":{"default_send_enabled":true,"send_enabled":[]},"supply":[]},"capability":{"index":"1","owners":[]},"crisis":{"constant_fee":{"amount":"1000","denom":"stake"}},"distribution":{"delegator_starting_infos":[],"....\n```\n::\n\nCreate a key to hold your account. An account is a pair of public key and private key. These keys are then stored in an object called a **keyring**.\n\n::highlight-card\n```bash\narchwayd keys add node1-account --home ./node1\n```\n::\n\nAfter running this command, you will be asked to create a **keyring** phrase. Create a **keyring** passphrase and re-enter the same phrase.\n\n::alert{variant="info"}\nPlease remember and safely store your keyring passphrase as it is needed to complete the following steps\n#title\nINFO\n::\n\nOnce you have created a passphrase, you will see a similar message:\n\n::highlight-card\n```bash\n  name: node1-account\n  type: local\n  address: archway10n7srpt0x859ghelguwxvxwh84vdsryy8ptel8\n  pubkey: \'{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A6+usIOWVm2K45jsAzjhrRWDzDWANQsQvxXLtIZyT4OL"}\'\n  mnemonic: "\n```\n::\n\nPlease take note of the address of **node1**, as you will need it.\n\n## Initialize the second node\n\nInitiate the node with the chain name like we did with the main node earlier.\n\nFrom the **testnet** folder, get inside the **node2** folder with:\n::highlight-card\n```bash\ncd node2\n```\n::\n::highlight-card\n\n```bash\narchwayd init node2 --chain-id my-chain --home ./node2\n```\n\n::\n\nLet\'s add the keys for the **node2**:\n\n::highlight-card\n\n```bash\narchwayd keys add node-2-account --home ./node-2\n```\n::\nPlease take note of the address of **node2**, as you will need it.\n\n## Set up the Genesis file\n\nNow, we should add the addresses of **node1** and **node2** into the Genesis file, so that those nodes have enough token to start validating in the network.\n\n\n1) From the **node1** folder, you can open the genesis file with:\n::highlight-card\n\n```bash\nnano ./node1/config/genesis.json\n```\n\n::\n\n2) Replace all the words **stake** with **validatortoken**, which is the name of the token for the local testnet.\n\n3) Go to the `"app_state":`part of the JSON. In the `"accounts": []`section, add the data of the two accounts associated to **node1** and **node2**.\n\nFor example:\n::highlight-card\n```json\n      "accounts": [\n        {\n          "@type": "/cosmos.auth.v1beta1.BaseAccount",\n          "address": "archway17js24qztj05ve2gmgqzvgcsvufeq2me3kd2pnj",\n          "pub_key": null,\n          "account_number": "0",\n          "sequence": "0"\n        },\n\n        {\n          "@type": "/cosmos.auth.v1beta1.BaseAccount",\n          "address": "archway195uq5lz84udvc8u5hxr4jsp0eg6x54a2jmq3zv",\n          "pub_key": null,\n          "account_number": "0",\n          "sequence": "0"\n        }\n      ]\n```\n::\n4) Go to the `"bank":`part of the JSON. In the `"balances": []`section, add the balances for **node1** and **node2**. \nFor example:\n::highlight-card\n```json\n\n      "balances": [\n        {\n          "address": "archway17js24qztj05ve2gmgqzvgcsvufeq2me3kd2pnj",\n          "coins": [\n            {\n              "denom": "validatortoken",\n              "amount": "100000000000000"\n            }\n          ]\n        },\n        {\n          "address": "archway195uq5lz84udvc8u5hxr4jsp0eg6x54a2jmq3zv",\n          "coins": [\n            {\n              "denom": "validatortoken",\n              "amount": "100000000000000"\n            }\n          ]\n        }\n      ],\n\n```    \n::\n\n**Alternative way:**\n\nAnother way to add the genesis accounts would be to add the validator key into the `genesis.app_state.accounts` array in the genesis file.\n\nFor the first node ,you would launch the following command in the **node1** folder:\n\n\n::highlight-card\n\n```bash\narchwayd add-genesis-account $(archwayd keys show node1-account -a --home ./node1) 1000000000validatortoken --home ./node1\n```\n\n\n::\n\nFor the second node ,you would launch the following command in the **node2** folder:\n\n::highlight-card\n\n```bash\narchwayd add-genesis-account $(archwayd keys show node1-account -a --home ./node2) 1000000000validatortoken --home ./node1\n```\n\n\n::\n<!-- This command lets you set the number of coins. Make sure this account has some coins\nwith the genesis.app_state.staking.params.bond_denom.\n-->\n\n\n\n<!--Note you will also see in bank section some pre-allocated tokens for **validatortoken**-->\n\n## Submit the Genesis Transaction\nWhen running a Cosmos SDK-based blockchain, new validators need to submit a **gentx** transaction to the network to become a validator. The genesis transactions is the first transaction of the local chain, while the **collect-gentxs** command collects all the gentx transactions submitted by potential validators and creates a new genesis file that includes these transactions.\n\nThe command typically involves the following steps:\n\n- Validators submit their **gentx** transactions to the network.\n- The **collect-gentxs** command is run on each node in the network.\n- The command collects all the **gentx** transactions that have been submitted.\n- The command generates a new genesis file that includes all the collected **gentx** transactions.\n- The new genesis file is distributed to all the nodes in the network.\n- By using the **collect-gentxs** command, the network can ensure that all the validators are included in the genesis file and can start validating the network from the beginning of the blockchain.\n\nNow we will generate the genesis transaction to create the validator, and collect it. The gensesis transaction is the first transaction of the local chain:\n\n\n::highlight-card\n```bash\narchwayd gentx node1-account 1000000000validatortoken --chain-id my-chain --home ./node1\narchwayd collect-gentxs --home ./node1\n```\n::\n\n\n\n\n## Fix port conflicts\n\nAs we are about to run the nodes on the same machine, we would need to fix any port conflicts. Otherwise, errors like **already in use ports** are returned.\n\nTo proceed, we can either:\n- Run each node in isolated environments, such as Docker containers. (you can have a look at the Docker instruction in [the node installing section](../running-a-node/install#build-archwayd-with-docker))\n- Edit the **app.toml** and **conf.toml** files to setup different port numbers:\n\n\n\n\n### Changes to the **app.toml** file\n\nThe first file we will change is the **app.toml** file. Go to this file by running the below commands:\n::highlight-card\n\n```bash\nnano ./node2/config/app.toml\n\n```\n\n::\nUnder the **gRPC Configuration** `[grpc]` section you will see the **address** settings. Change the value to the below:\n<!--\n| Original Value           | Changed Value            |\n| ------------------------ | ------------------------ |\n| address = "0.0.0.0:9090" | address = "0.0.0.0:9092" |\n-->\n\n`enable = true\naddress=“0.0.0.0:9092”`\n\nUnder the **gRPC Web Configuration** `[grpc-web]` section you will see the **address** settings. Change the value to the below:\n`address=“0.0.0.0:9093”`\n\nSave the file after making the above changes.\n\n### Changes to the **config.toml** file\n\nThe next file we will change is the **config.toml** file. Go to this file by running the below commands after you have made the first edits above:\n::highlight-card\n\n```bash\nnano ./node2/config/config.toml\n```\n\n::\nUnder the **RPC Server Configuration Options** `[rpc]` you will see the **laddr** settings. Change the value to the below:\n`laddr=“tcp://127.0.0.1:10002”`\n<!--\n| Original Value                  | Changed Value                   |\n| ------------------------------- | ------------------------------- |\n| laddr = "tcp://127.0.0.1:26657" | laddr = "tcp://127.0.0.1:10002" |\n-->\nThen find the **pprof_laddr** settings and change it to the value below:\n<!--\n| Original Value                 | Changed Value                  |\n| ------------------------------ | ------------------------------ |\n| pprof_laddr = "localhost:6060" | pprof_laddr = "localhost:6062" |\n-->\n`pprof_laddr=“localhost:6062”`\nAnd the last thing we need to change in this file is the listen port for p2p connections. This is under the **P2P Configuration Options** `[p2p]` and we will change the **laddr** value to the below:\n`laddr=“tcp://0.0.0.0:20002”`\n\n<!--\n| Original Value                | Changed Value                 |\n| ----------------------------- | ----------------------------- |\n| laddr = "tcp://0.0.0.0:26656" | laddr = "tcp://0.0.0.0:20002" |\n-->\nSave the file after making the above changes.\n\n\n## Copy the genesis file\n\nIn order to join the local test network, we need to use the same genesis file of that network. The genesis file contains all the information and parameters about the initial state of our blockchain.\n\nLet\'s copy the genesis file from the **node1** folder and replace it on the genesis file of **node2**.\n\nMake sure you are in the /testnet directory before running the below command.\n::highlight-card\n\n```bash\ncp  node1/node1/config/genesis.json node2/node2/config/genesis.json\n\n```\n\n::\n\n\n\n\n## Start the first validator node\n\n<!--\nNow we will generate the genesis transaction to create the validator. The gensesis transactions is the first transaction of the local chain.\n::highlight-card\n\n```bash\narchwayd gentx node-main-account 1000000000stake --chain-id my-chain --home ./node-main\n\narchwayd collect-gentxs --home ./node-main\n```\n\n::\nAfter running the above command, you will see a message like this:\n::highlight-card\n\n```bash\nGenesis transaction written to "node-main/config/gentx/gentx-69b522ae3010219fc2317b3aa8f1c789df81fa30.json"\n```\nOUTADET CONTENT-->\n\nIn the **node1** folder, let\'s start the fist validator node.\n::highlight-card\n\n```bash\narchwayd start --home ./node1\n```\n\n::\n\n\nAfer the node starts running, you should see a message like below:\n::highlight-card\n\n```bash\n8:49PM INF starting node with ABCI Tendermint in-process\n```\n\n::\n\n::alert{variant="info"}\nIn case you see the error message `listen tcp 0.0.0.0:9090: bind: address already in use`, open your `app.toml` and change the tcp address to another port(for example `9091`) by updating the `app.toml` with `address = "0.0.0.0:9091"` under both sections [grpc-web] and [grpc]\n\n#title\nINFO\n::\n\n\n\nYou have created the first node! Now let\'s create a second node to connect to our testnet.\n\n\n## Find the seeds\' addresses\n\nTo join a p2p network we need the addresses of nodes that we are willing to connect to.\nSo let\'s find the address of the **node1** via running the following command:\n::highlight-card\n\n```bash\narchwayd status\n```\n\n::\n\n\n::alert{variant="info"}\nPlease note that this command shows the status of the running node on default port. If we want to get the status of a specific node, we need to give it the IP address and the port it is listening to.\n#title\nINFO\n::\n\nFor example: `archwayd status -n tcp://localhost:10002` for **node2** that we just configured.\n\nThis command gives an output like the following:\n::highlight-card\n\n```json\n{\n  "NodeInfo": {\n    "protocol_version": {\n      "p2p": "8",\n      "block": "11",\n      "app": "0"\n    },\n    "id": "a118197af3c66781faa0299633cc59a1622d27e3",\n    "listen_addr": "tcp://0.0.0.0:26656",\n    "network": "chain-main",\n    "version": "",\n    "channels": "40202122233038606100",\n    "moniker": "node3",\n    "other": {\n      "tx_index": "on",\n      "rpc_address": "tcp://127.0.0.1:10003"\n    }\n  },\n  "SyncInfo": {\n    ...\n  },\n  "ValidatorInfo": {\n    ...\n  }\n}\n```\n\n::\nAll we need is:\n\n- The **id** which in our example is **a118197af3c66781faa0299633cc59a1622d27e3**\n- The host name and its listening port **listen_addr** which here is: `tcp://0.0.0.0:26656`\n\n## Start the second validator node\n\nSince we are running it on our local machine, the IP address is `0.0.0.0` which refers to **localhost** we can use either **localhost** or `127.0.0.1`.\n\nNow, in the **node2** let\'s run the following command to let the second node join the network:\n::highlight-card\n\n```bash\narchwayd --home ./node2 start --p2p.seeds a118197af3c66781faa0299633cc59a1622d27e3@localhost:26656\n```\n\n::\n\n## Using Gex to visualize the network status\n\n <a href="https://github.com/cosmos/gex" target="_blank">Gex</a> is a real time in-terminal explorer for Cosmos SDK blockchains. Gex displays blocks, transactions, validator, network status, and more information. Use the GEX block explorer to see the status of peers, connection, version, and other useful information to have a quick peek into your own node.\n\nLet\'s quickly install **Gex** to see the status of our node.\n::highlight-card\n\n```bash\ngo install github.com/cosmos/gex@latest\n```\n\n::\nTo launch a GEX in your terminal window, type:\n::highlight-card\n\n```bash\ngex\n```\n\n::\n\n\nBefore connecting to **node2**, our gex would have looked like this:\n\n![](/images/docs/Gex01.png)\n\nAs you can see the number of peers is zero. After starting the second now, gex should now look like this:\n\n![](/images/docs/Gex02.png)\n\nSo now we successfully joined a running network.\n\n## Running a Local Testnet with docker\n\nDocker allows us to have a running a single node local test net in an easy way.\nFirst download the repository:\n::highlight-card\n\n```bash\ngit clone git@github.com:archway-network/archway.git\ncd archway\n```\n\n::\nOnce the docker image is built successfully, run the following command:\n::highlight-card\n\n```bash\ndocker-compose up\n```\n\n::\nIf you want to hide the terminal output, just use flag `-d` like this:\n::highlight-card\n\n```bash\ndocker-compose up -d\n```\n\n::',
    modified: 1678275989.419273,
    group: 'validators',
    viewed: 31,
    objectID: 'validators|node|running-a-local-testnet',
    _highlightResult: {
      title: { value: 'Running a Local Testnet', matchLevel: 'none', matchedWords: [] },
      description: { value: 'Learn how to set up a local Archway network', matchLevel: 'none', matchedWords: [] },
      content: {
        value:
          '# Running a Local Testnet\n\nThis guide explains how to run a local Archway testnet. If you have not installed an Archway node before, please follow this [guide here](../running-a-node/prerequisites).\n\n\n\n## Create the required directories\n\nTo have a working test network we need at least two validator nodes.\n\nFirst, let\'s create a directory to keep all nodes\' data in an organized way:\n::highlight-card\n\n```bash\nmkdir testnet\ncd testnet\n```\n\n::\n\nSince we will create two nodes in this testnet, let\'s:\n\nCreate a directory for the first node that will call **node1**.\n\n::highlight-card\n```bash\nmkdir -p node1\n```\n::\n\n\n\nCreate a directory for the second node, that we will call **node2**:\n::highlight-card\n\n```bash\nmkdir -p node2\n```\n\n::\n\n\n\n## Initialize the first node\n\n\n\nFrom the **testnet** folder, get inside the **node1** folder with:\n::highlight-card\n```bash\ncd node1\n```\n::\n\nInitiate **node1** with the chain name:\n\n::highlight-card\n```bash\narchwayd init node1 --chain-id my-chain --home ./node1\n```\n::\n\n\nYou will see something similar after running the command:\n\n::highlight-card\n```bash\n{"app_message":{"auth":{"accounts":[],"params":{"max_memo_characters":"256","sig_verify_cost_ed25519":"590","sig_verify_cost_secp256k1":"1000","tx_sig_limit":"7","tx_size_cost_per_byte":"10"}},"authz":{"authorization":[]},"bank":{"balances":[],"denom_metadata":[],"params":{"default_send_enabled":true,"send_enabled":[]},"supply":[]},"capability":{"index":"1","owners":[]},"crisis":{"constant_fee":{"amount":"1000","denom":"stake"}},"distribution":{"delegator_starting_infos":[],"....\n```\n::\n\nCreate a key to hold your account. An account is a pair of public key and private key. These keys are then stored in an object called a **keyring**.\n\n::highlight-card\n```bash\narchwayd keys add node1-account --home ./node1\n```\n::\n\nAfter running this command, you will be asked to create a **keyring** phrase. Create a **keyring** passphrase and re-enter the same phrase.\n\n::alert{variant="info"}\nPlease remember and safely store your keyring passphrase as it is needed to complete the following steps\n#title\nINFO\n::\n\nOnce you have created a passphrase, you will see a similar message:\n\n::highlight-card\n```bash\n  name: node1-account\n  type: local\n  address: archway10n7srpt0x859ghelguwxvxwh84vdsryy8ptel8\n  pubkey: \'{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A6+usIOWVm2K45jsAzjhrRWDzDWANQsQvxXLtIZyT4OL"}\'\n  mnemonic: "\n```\n::\n\nPlease take note of the address of **node1**, as you will need it.\n\n## Initialize the second node\n\nInitiate the node with the chain name like we did with the main node earlier.\n\nFrom the **testnet** folder, get inside the **node2** folder with:\n::highlight-card\n```bash\ncd node2\n```\n::\n::highlight-card\n\n```bash\narchwayd init node2 --chain-id my-chain --home ./node2\n```\n\n::\n\nLet\'s add the keys for the **node2**:\n\n::highlight-card\n\n```bash\narchwayd keys add node-2-account --home ./node-2\n```\n::\nPlease take note of the address of **node2**, as you will need it.\n\n## Set up the Genesis file\n\nNow, we should add the addresses of **node1** and **node2** into the Genesis file, so that those nodes have enough token to start validating in the network.\n\n\n1) From the **node1** folder, you can open the genesis file with:\n::highlight-card\n\n```bash\nnano ./node1/config/genesis.json\n```\n\n::\n\n2) Replace all the words **stake** with **validatortoken**, which is the name of the token for the local testnet.\n\n3) Go to the `"app_state":`part of the JSON. In the `"accounts": []`section, add the data of the two accounts associated to **node1** and **node2**.\n\nFor example:\n::highlight-card\n```json\n      "accounts": [\n        {\n          "@type": "/cosmos.auth.v1beta1.BaseAccount",\n          "address": "archway17js24qztj05ve2gmgqzvgcsvufeq2me3kd2pnj",\n          "pub_key": null,\n          "account_number": "0",\n          "sequence": "0"\n        },\n\n        {\n          "@type": "/cosmos.auth.v1beta1.BaseAccount",\n          "address": "archway195uq5lz84udvc8u5hxr4jsp0eg6x54a2jmq3zv",\n          "pub_key": null,\n          "account_number": "0",\n          "sequence": "0"\n        }\n      ]\n```\n::\n4) Go to the `"bank":`part of the JSON. In the `"balances": []`section, add the balances for **node1** and **node2**. \nFor example:\n::highlight-card\n```json\n\n      "balances": [\n        {\n          "address": "archway17js24qztj05ve2gmgqzvgcsvufeq2me3kd2pnj",\n          "coins": [\n            {\n              "denom": "validatortoken",\n              "amount": "100000000000000"\n            }\n          ]\n        },\n        {\n          "address": "archway195uq5lz84udvc8u5hxr4jsp0eg6x54a2jmq3zv",\n          "coins": [\n            {\n              "denom": "validatortoken",\n              "amount": "100000000000000"\n            }\n          ]\n        }\n      ],\n\n```    \n::\n\n**Alternative way:**\n\nAnother way to add the genesis accounts would be to add the validator key into the `genesis.app_state.accounts` array in the genesis file.\n\nFor the first node ,you would launch the following command in the **node1** folder:\n\n\n::highlight-card\n\n```bash\narchwayd add-genesis-account $(archwayd keys show node1-account -a --home ./node1) 1000000000validatortoken --home ./node1\n```\n\n\n::\n\nFor the second node ,you would launch the following command in the **node2** folder:\n\n::highlight-card\n\n```bash\narchwayd add-genesis-account $(archwayd keys show node1-account -a --home ./node2) 1000000000validatortoken --home ./node1\n```\n\n\n::\n<!-- This command lets you set the number of coins. Make sure this account has some coins\nwith the genesis.app_state.staking.params.bond_denom.\n-->\n\n\n\n<!--Note you will also see in bank section some pre-allocated tokens for **validatortoken**-->\n\n## Submit the Genesis Transaction\nWhen running a Cosmos SDK-based blockchain, new validators need to submit a **gentx** transaction to the network to become a validator. The genesis transactions is the first transaction of the local chain, while the **collect-gentxs** command collects all the gentx transactions submitted by potential validators and creates a new genesis file that includes these transactions.\n\nThe command typically involves the following steps:\n\n- Validators submit their **gentx** transactions to the network.\n- The **collect-gentxs** command is run on each node in the network.\n- The command collects all the **gentx** transactions that have been submitted.\n- The command generates a new genesis file that includes all the collected **gentx** transactions.\n- The new genesis file is distributed to all the nodes in the network.\n- By using the **collect-gentxs** command, the network can ensure that all the validators are included in the genesis file and can start validating the network from the beginning of the blockchain.\n\nNow we will generate the genesis transaction to create the validator, and collect it. The gensesis transaction is the first transaction of the local chain:\n\n\n::highlight-card\n```bash\narchwayd gentx node1-account 1000000000validatortoken --chain-id my-chain --home ./node1\narchwayd collect-gentxs --home ./node1\n```\n::\n\n\n\n\n## Fix port conflicts\n\nAs we are about to run the nodes on the same machine, we would need to fix any port conflicts. Otherwise, errors like **already in use ports** are returned.\n\nTo proceed, we can either:\n- Run each node in isolated environments, such as Docker containers. (you can have a look at the Docker instruction in [the node installing section](../running-a-node/install#build-archwayd-with-docker))\n- Edit the **app.toml** and **conf.toml** files to setup different port numbers:\n\n\n\n\n### Changes to the **app.toml** file\n\nThe first file we will change is the **app.toml** file. Go to this file by running the below commands:\n::highlight-card\n\n```bash\nnano ./node2/config/app.toml\n\n```\n\n::\nUnder the **gRPC Configuration** `[grpc]` section you will see the **address** settings. Change the value to the below:\n<!--\n| Original Value           | Changed Value            |\n| ------------------------ | ------------------------ |\n| address = "0.0.0.0:9090" | address = "0.0.0.0:9092" |\n-->\n\n`enable = true\naddress=“0.0.0.0:9092”`\n\nUnder the **gRPC Web Configuration** `[grpc-web]` section you will see the **address** settings. Change the value to the below:\n`address=“0.0.0.0:9093”`\n\nSave the file after making the above changes.\n\n### Changes to the **config.toml** file\n\nThe next file we will change is the **config.toml** file. Go to this file by running the below commands after you have made the first edits above:\n::highlight-card\n\n```bash\nnano ./node2/config/config.toml\n```\n\n::\nUnder the **RPC Server Configuration Options** `[rpc]` you will see the **laddr** settings. Change the value to the below:\n`laddr=“tcp://127.0.0.1:10002”`\n<!--\n| Original Value                  | Changed Value                   |\n| ------------------------------- | ------------------------------- |\n| laddr = "tcp://127.0.0.1:26657" | laddr = "tcp://127.0.0.1:10002" |\n-->\nThen find the **pprof_laddr** settings and change it to the value below:\n<!--\n| Original Value                 | Changed Value                  |\n| ------------------------------ | ------------------------------ |\n| pprof_laddr = "localhost:6060" | pprof_laddr = "localhost:6062" |\n-->\n`pprof_laddr=“localhost:6062”`\nAnd the last thing we need to change in this file is the listen port for p2p connections. This is under the **P2P Configuration Options** `[p2p]` and we will change the **laddr** value to the below:\n`laddr=“tcp://0.0.0.0:20002”`\n\n<!--\n| Original Value                | Changed Value                 |\n| ----------------------------- | ----------------------------- |\n| laddr = "tcp://0.0.0.0:26656" | laddr = "tcp://0.0.0.0:20002" |\n-->\nSave the file after making the above changes.\n\n\n## Copy the genesis file\n\nIn order to join the local test network, we need to use the same genesis file of that network. The genesis file contains all the information and parameters about the initial state of our blockchain.\n\nLet\'s copy the genesis file from the **node1** folder and replace it on the genesis file of **node2**.\n\nMake sure you are in the /testnet directory before running the below command.\n::highlight-card\n\n```bash\ncp  node1/node1/config/genesis.json node2/node2/config/genesis.json\n\n```\n\n::\n\n\n\n\n## Start the first validator node\n\n<!--\nNow we will generate the genesis transaction to create the validator. The gensesis transactions is the first transaction of the local chain.\n::highlight-card\n\n```bash\narchwayd gentx node-main-account 1000000000stake --chain-id my-chain --home ./node-main\n\narchwayd collect-gentxs --home ./node-main\n```\n\n::\nAfter running the above command, you will see a message like this:\n::highlight-card\n\n```bash\nGenesis transaction written to "node-main/config/gentx/gentx-69b522ae3010219fc2317b3aa8f1c789df81fa30.json"\n```\nOUTADET CONTENT-->\n\nIn the **node1** folder, let\'s start the fist validator node.\n::highlight-card\n\n```bash\narchwayd start --home ./node1\n```\n\n::\n\n\nAfer the node starts running, you should see a message like below:\n::highlight-card\n\n```bash\n8:49PM INF starting node with ABCI Tendermint in-process\n```\n\n::\n\n::alert{variant="info"}\nIn case you see the error message `listen tcp 0.0.0.0:9090: bind: address already in use`, open your `app.toml` and change the tcp address to another port(for example `9091`) by updating the `app.toml` with `address = "0.0.0.0:9091"` under both sections [grpc-web] and [grpc]\n\n#title\nINFO\n::\n\n\n\nYou have created the first node! Now let\'s create a second node to connect to our testnet.\n\n\n## Find the seeds\' addresses\n\nTo join a p2p network we need the addresses of nodes that we are willing to connect to.\nSo let\'s find the address of the **node1** via running the following command:\n::highlight-card\n\n```bash\narchwayd status\n```\n\n::\n\n\n::alert{variant="info"}\nPlease note that this command shows the status of the running node on default port. If we want to get the status of a specific node, we need to give it the IP address and the port it is listening to.\n#title\nINFO\n::\n\nFor example: `archwayd status -n tcp://localhost:10002` for **node2** that we just configured.\n\nThis command gives an output like the following:\n::highlight-card\n\n```json\n{\n  "NodeInfo": {\n    "protocol_version": {\n      "p2p": "8",\n      "block": "11",\n      "app": "0"\n    },\n    "id": "a118197af3c66781faa0299633cc59a1622d27e3",\n    "listen_addr": "tcp://0.0.0.0:26656",\n    "network": "chain-main",\n    "version": "",\n    "channels": "40202122233038606100",\n    "moniker": "node3",\n    "other": {\n      "tx_index": "on",\n      "rpc_address": "tcp://127.0.0.1:10003"\n    }\n  },\n  "SyncInfo": {\n    ...\n  },\n  "ValidatorInfo": {\n    ...\n  }\n}\n```\n\n::\nAll we need is:\n\n- The **id** which in our example is **a118197af3c66781faa0299633cc59a1622d27e3**\n- The host name and its listening port **listen_addr** which here is: `tcp://0.0.0.0:26656`\n\n## Start the second validator node\n\nSince we are running it on our local machine, the IP address is `0.0.0.0` which refers to **localhost** we can use either **localhost** or `127.0.0.1`.\n\nNow, in the **node2** let\'s run the following command to let the second node join the network:\n::highlight-card\n\n```bash\narchwayd --home ./node2 start --p2p.seeds a118197af3c66781faa0299633cc59a1622d27e3@localhost:26656\n```\n\n::\n\n## Using Gex to visualize the network status\n\n <a href="https://github.com/cosmos/gex" target="_blank">Gex</a> is a real time in-terminal explorer for Cosmos SDK blockchains. Gex displays blocks, transactions, validator, network status, and more information. Use the GEX block explorer to see the status of peers, connection, version, and other useful information to have a quick peek into your own node.\n\nLet\'s quickly install **Gex** to see the status of our node.\n::highlight-card\n\n```bash\ngo install github.com/cosmos/gex@latest\n```\n\n::\nTo launch a GEX in your terminal window, type:\n::highlight-card\n\n```bash\ngex\n```\n\n::\n\n\nBefore connecting to **node2**, our gex would have looked like this:\n\n![](/images/docs/Gex01.png)\n\nAs you can see the number of peers is zero. After starting the second now, gex should now look like this:\n\n![](/images/docs/Gex02.png)\n\nSo now we successfully joined a running network.\n\n## Running a Local Testnet with docker\n\nDocker allows us to have a running a single node local test net in an easy way.\nFirst download the repository:\n::highlight-card\n\n```bash\ngit clone git@github.com:archway-network/archway.git\ncd archway\n```\n\n::\nOnce the docker image is built successfully, run the following command:\n::highlight-card\n\n```bash\ndocker-compose up\n```\n\n::\nIf you want to hide the terminal output, just use flag `-d` like this:\n::highlight-card\n\n```bash\ndocker-compose up -d\n```\n\n::',
        matchLevel: 'none',
        matchedWords: [],
      },
      modified: { value: '1678275989.419273', matchLevel: 'none', matchedWords: [] },
      viewed: { value: '31', matchLevel: 'none', matchedWords: [] },
    },
  },
  {
    title: 'Troubleshooting Common Issues With Validator Nodes',
    description: 'Discover how to fix issues with Validators and Nodes',
    parentSection: 'Run a node',
    content:
      '# Troubleshooting Common Issues With Validator Nodes\n\nHere we walk through several common issues that you might encounter when you are running a validator node.\n\n## Validator has 0 voting power\n\nIf your validator has 0 voting power, your validator has become auto-unbonded. On the mainnet, validators unbond when they do not vote on **9500** of the last **10000** blocks (**50** of the last **100** blocks on the testnet). Because blocks are proposed every **~5** seconds, a validator that is unresponsive for **~13** hours (**~4** minutes on testnet) become unbonded. This problem usually happens when your **archwayd** process crashes.\n\nTo return the voting power back to your validator, check if **archwayd** is running:\n\n::highlight-card\n\n```bash\narchwayd status\n```\n\n::\n\nIf **archwayd** is not running, restart it:\n::highlight-card\n\n```bash\narchwayd start\n```\n\n::\n\n## "archwayd: command not found" error\n\nIf you receive an  `archwayd: command not found` Error message, you should:\n\n#### Make sure your **GOPATH** is properly set\nEnsure the Go environment variables are <a href="https://golang.org/doc/gopath_code#GOPATH" target="_blank">set properly</a> on your system.\n\nA way to set up the **GOPATH** is by running the following commands:\n::highlight-card\n```bash\nexport GOPATH=$HOME/go\n\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin\n```\n::\n\nor:\n\n::highlight-card\n```bash\n\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n::\n\nAnd applying those changes with:\n\n::highlight-card\n```bash\n\nsource ~/.profile\n```\n\n::\n\n\n\nAlso, you should make sure the **archwayd** binary is in the right place by running the follwoing command:\n\n::highlight-card\n\n```bash\nsudo cp /$HOME/go/bin/archwayd /usr/local/bin\n```\n\n::\n\n\nWhen running a validator, consider adding the flag **--home ./my-node** flag in almost all commands tells **archwayd** to work on that specific directory.\n\n## Cleaning up\n\nIf you already tried setting up a node and need a cleanup, it may be good to remove any previous genesis file and configuration that you have used:\n\n\n```bash\nrm -rf ~/.archway\n```\n\n\n::alert{variant="warning"}\nThis command will remove all data and configs you already set.\n#title\nWARNING\n::\n\n## Unjail the Validator\n\nWait for your full node to reach the latest block, and run:\n::highlight-card\n\n```bash\narchwayd tx slashing unjail <ValidatorAddress> --chain-id=<ChainId> --from=<Name>\n```\n\n::\nwhere\n\n- `<ValidatorAddress>` is the address of your validator account.\n- `<Name>` is the name or address of the validator account. To find this information, run `archwayd keys list`.\n\n  **Warning**:\n  If you don\'t wait for **archwayd** to sync before running **unjail**, an error message will inform you that your validator is still jailed.\n\nYou can check your validator again to see if your voting power is back:\n::highlight-card\n\n```bash\narchwayd status\n```\n\n::\nIf your voting power is less than it was previously is probably due to the fact you were slashed for downtime.\n\n## Too many files open and Archwayd crashes\n\nThe default number of files Linux can open per process is **1024**. **archwayd** is known to open more than this amount, causing the process to crash. To fix this problem:\n\nIncrease the number of open files by running:\n::highlight-card\n\n```bash\nulimit -n 4096\n```\n\n\n\n::\n\n\nAnd restart the process by running:\n\n::highlight-card\n\n```bash\n   archwayd start\n```\n\n::\n\n## Additional Considerations:\n\n### **Connection errors**:\n- Check your network settings: Make sure that your node\'s network settings are properly configured to communicate with other nodes on the network. Check your firewall settings and ensure that they are not blocking incoming or outgoing connections.\n- Restart your node: Try restarting your node to see if that resolves the connection issue. Sometimes a simple restart can help fix communication problems.\n\n### **Memory errors**:\n- Make sure that your node\'s memory settings are properly configured for your node\'s resources and capabilities.\n\n### **Disk space errors**:\n- Make sure that your node\'s disk space settings are properly configured for your node\'s resources and capabilities.\n- If your node is running out of disk space, consider pruning old blocks or transactions to free up space\n\n## Not finding what you were looking for?\n\nPlease reach out on <a href="https://discord.gg/-5FVvx3WGfa" target="_blank">Discord</a>\n, the DevRel team will be happy to help you out :)\n\nAlso, consider checking <a href="https://github.com/archway-network" target="_blank">Github</a>, or reading our technical articles on <a href="https://medium.com/archwayhq" target="_blank">Medium</a>.',
    modified: 1678275989.419273,
    group: 'validators',
    viewed: 28,
    objectID: 'validators|troubleshooting',
    _highlightResult: {
      title: { value: 'Troubleshooting Common Issues With Validator Nodes', matchLevel: 'none', matchedWords: [] },
      description: { value: 'Discover how to fix issues with Validators and Nodes', matchLevel: 'none', matchedWords: [] },
      content: {
        value:
          '# Troubleshooting Common Issues With Validator Nodes\n\nHere we walk through several common issues that you might encounter when you are running a validator node.\n\n## Validator has 0 voting power\n\nIf your validator has 0 voting power, your validator has become auto-unbonded. On the mainnet, validators unbond when they do not vote on **9500** of the last **10000** blocks (**50** of the last **100** blocks on the testnet). Because blocks are proposed every **~5** seconds, a validator that is unresponsive for **~13** hours (**~4** minutes on testnet) become unbonded. This problem usually happens when your **archwayd** process crashes.\n\nTo return the voting power back to your validator, check if **archwayd** is running:\n\n::highlight-card\n\n```bash\narchwayd status\n```\n\n::\n\nIf **archwayd** is not running, restart it:\n::highlight-card\n\n```bash\narchwayd start\n```\n\n::\n\n## "archwayd: command not found" error\n\nIf you receive an  `archwayd: command not found` Error message, you should:\n\n#### Make sure your **GOPATH** is properly set\nEnsure the Go environment variables are <a href="https://golang.org/doc/gopath_code#GOPATH" target="_blank">set properly</a> on your system.\n\nA way to set up the **GOPATH** is by running the following commands:\n::highlight-card\n```bash\nexport GOPATH=$HOME/go\n\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin\n```\n::\n\nor:\n\n::highlight-card\n```bash\n\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n::\n\nAnd applying those changes with:\n\n::highlight-card\n```bash\n\nsource ~/.profile\n```\n\n::\n\n\n\nAlso, you should make sure the **archwayd** binary is in the right place by running the follwoing command:\n\n::highlight-card\n\n```bash\nsudo cp /$HOME/go/bin/archwayd /usr/local/bin\n```\n\n::\n\n\nWhen running a validator, consider adding the flag **--home ./my-node** flag in almost all commands tells **archwayd** to work on that specific directory.\n\n## Cleaning up\n\nIf you already tried setting up a node and need a cleanup, it may be good to remove any previous genesis file and configuration that you have used:\n\n\n```bash\nrm -rf ~/.archway\n```\n\n\n::alert{variant="warning"}\nThis command will remove all data and configs you already set.\n#title\nWARNING\n::\n\n## Unjail the Validator\n\nWait for your full node to reach the latest block, and run:\n::highlight-card\n\n```bash\narchwayd tx slashing unjail <ValidatorAddress> --chain-id=<ChainId> --from=<Name>\n```\n\n::\nwhere\n\n- `<ValidatorAddress>` is the address of your validator account.\n- `<Name>` is the name or address of the validator account. To find this information, run `archwayd keys list`.\n\n  **Warning**:\n  If you don\'t wait for **archwayd** to sync before running **unjail**, an error message will inform you that your validator is still jailed.\n\nYou can check your validator again to see if your voting power is back:\n::highlight-card\n\n```bash\narchwayd status\n```\n\n::\nIf your voting power is less than it was previously is probably due to the fact you were slashed for downtime.\n\n## Too many files open and Archwayd crashes\n\nThe default number of files Linux can open per process is **1024**. **archwayd** is known to open more than this amount, causing the process to crash. To fix this problem:\n\nIncrease the number of open files by running:\n::highlight-card\n\n```bash\nulimit -n 4096\n```\n\n\n\n::\n\n\nAnd restart the process by running:\n\n::highlight-card\n\n```bash\n   archwayd start\n```\n\n::\n\n## Additional Considerations:\n\n### **Connection errors**:\n- Check your network settings: Make sure that your node\'s network settings are properly configured to communicate with other nodes on the network. Check your firewall settings and ensure that they are not blocking incoming or outgoing connections.\n- Restart your node: Try restarting your node to see if that resolves the connection issue. Sometimes a simple restart can help fix communication problems.\n\n### **Memory errors**:\n- Make sure that your node\'s memory settings are properly configured for your node\'s resources and capabilities.\n\n### **Disk space errors**:\n- Make sure that your node\'s disk space settings are properly configured for your node\'s resources and capabilities.\n- If your node is running out of disk space, consider pruning old blocks or transactions to free up space\n\n## Not finding what you were looking for?\n\nPlease reach out on <a href="https://discord.gg/-5FVvx3WGfa" target="_blank">Discord</a>\n, the DevRel team will be happy to help you out :)\n\nAlso, consider checking <a href="https://github.com/archway-network" target="_blank">Github</a>, or reading our technical articles on <a href="https://medium.com/archwayhq" target="_blank">Medium</a>.',
        matchLevel: 'none',
        matchedWords: [],
      },
      modified: { value: '1678275989.419273', matchLevel: 'none', matchedWords: [] },
      viewed: { value: '28', matchLevel: 'none', matchedWords: [] },
    },
  },
  {
    title: 'Prerequisites',
    parentSection: 'Run a node',
    content:
      '# Prerequisites\n\nThis guide explains what are the requirements to install and run an Archway full node.\n\n\n## Hardware requirements:\n\nThe following hardware requirements are expected:\n- Linux distribution\n- x86_64 processor\n- 16 GB RAM\n- 500 GB to 2 TB storage\\*\n- Storage size for validators depends on the level of desired pruning.\n\n## Installing Prerequisites\n\nBelow are the packages that your machine needs to complete the installation process.\n::highlight-card\n\n```bash\n# updates and upgrades the list of local packages\nsudo apt-get update && sudo apt upgrade -y\n\n#installs docker, build-essential package and git\nsudo apt-get install build-essential docker-ce docker-ce-cli containerd.io docker-compose-plugin git\n\n```\n\n::\n\n## Installing Go\n\nGo Version 1.16 or higher is required to run an Archway node. Please find a <a href="https://golang.org/doc/install" target="_blank">guide here</a>\n on how to install Go.\n\nEnsure the Go environment variables are <a href="https://golang.org/doc/gopath_code#GOPATH" target="_blank">set properly</a>\n on your system.\n\nAs an example, you may need to install Go by running:\n\n```sudo apt install go```\n\nand set up the `GOPATH` by launching:\n\n```bash\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin\n```\n\nor:\n\n```bash\nexport PATH=$PATH:/usr/local/go/bin\n```\n\nand applying those changes with:\n\n```bash\nsource ~/.profile\n```\n\n## Docker (optional)\n\nYou can also install **archwayd** by using <a href="https://docs.docker.com/get-docker" target="_blank" title="Install Docker">Docker</a>.\n\n\n\n\n::\n::alert{variant="warning"}\nFor Linux users, it\'s recommended to run the Docker daemon in <a href="https://docs.docker.com/engine/security/rootless/" target="_blank" title="Docker Rootless mode">Rootless Mode</a>.\n#title\nWARNING\n::\n\n\n## Next Steps\nYou are ready to go!\nLet\'s go forward with installing [**archwayd**](2.install.md)',
    modified: 1678275989.415273,
    group: 'validators',
    viewed: 28,
    objectID: 'validators|node|prerequisites',
    _highlightResult: {
      title: { value: 'Prerequisites', matchLevel: 'none', matchedWords: [] },
      content: {
        value:
          '# Prerequisites\n\nThis guide explains what are the requirements to install and run an Archway full node.\n\n\n## Hardware requirements:\n\nThe following hardware requirements are expected:\n- Linux distribution\n- x86_64 processor\n- 16 GB RAM\n- 500 GB to 2 TB storage\\*\n- Storage size for validators depends on the level of desired pruning.\n\n## Installing Prerequisites\n\nBelow are the packages that your machine needs to complete the installation process.\n::highlight-card\n\n```bash\n# updates and upgrades the list of local packages\nsudo apt-get update && sudo apt upgrade -y\n\n#installs docker, build-essential package and git\nsudo apt-get install build-essential docker-ce docker-ce-cli containerd.io docker-compose-plugin git\n\n```\n\n::\n\n## Installing Go\n\nGo Version 1.16 or higher is required to run an Archway node. Please find a <a href="https://golang.org/doc/install" target="_blank">guide here</a>\n on how to install Go.\n\nEnsure the Go environment variables are <a href="https://golang.org/doc/gopath_code#GOPATH" target="_blank">set properly</a>\n on your system.\n\nAs an example, you may need to install Go by running:\n\n```sudo apt install go```\n\nand set up the `GOPATH` by launching:\n\n```bash\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin\n```\n\nor:\n\n```bash\nexport PATH=$PATH:/usr/local/go/bin\n```\n\nand applying those changes with:\n\n```bash\nsource ~/.profile\n```\n\n## Docker (optional)\n\nYou can also install **archwayd** by using <a href="https://docs.docker.com/get-docker" target="_blank" title="Install Docker">Docker</a>.\n\n\n\n\n::\n::alert{variant="warning"}\nFor Linux users, it\'s recommended to run the Docker daemon in <a href="https://docs.docker.com/engine/security/rootless/" target="_blank" title="Docker Rootless mode">Rootless Mode</a>.\n#title\nWARNING\n::\n\n\n## Next Steps\nYou are ready to go!\nLet\'s go forward with installing [**archwayd**](2.install.md)',
        matchLevel: 'none',
        matchedWords: [],
      },
      modified: { value: '1678275989.415273', matchLevel: 'none', matchedWords: [] },
      viewed: { value: '28', matchLevel: 'none', matchedWords: [] },
    },
  },
  {
    title: 'Node Installation',
    parentSection: 'Run a node',
    content:
      '# Node Installation\n\nThis guide explains how to install and run an Archway full node.\n\n\n## Build archwayd from Source\n\n\n### **Clone the repository**\nNow let\'s get the source code from the <a href="https://github.com/archway-network/archway" target="_blank">Archway Repository</a>.\n::highlight-card\n\n```bash\n\ngit clone https://github.com/archway-network/archway.git\n\ncd archway\n\ngit fetch\n\ngit checkout <version-tag>\n\n```\n\n::\n\n::alert{variant="info"}\nFor connecting to the Constantine Developer Testnet, the version tag `v0.2.0` should be used:\n\n`git checkout v0.2.0`\n\n#title\nINFO\n::\n\n### **Build archwayd**\nLet\'s build and install the `archwayd` daemon:\n::highlight-card\n\n```bash\nmake install\n```\n\n::\nConfirm that the installation has been completed by running the following command:\n::highlight-card\n\n```bash\narchwayd version\n\n#1.2.3\n```\n\n::\n\n## Build archwayd with Docker\n\nMake sure you have <a href="https://docs.docker.com/get-docker" target="_blank" title="Install Docker">Docker</a> installed on your machine. \n\n\n::alert{variant="warning"}\nFor Linux users, it\'s recommended to run the Docker daemon in <a href="https://docs.docker.com/engine/security/rootless/" target="_blank" title="Docker Rootless mode">Rootless Mode</a>.\n#title\nWARNING\n::\n\n\n\n### **Pull the Docker image**\n\nPull the image from <a href="https://hub.docker.com/r/archwaynetwork/archwayd" target="_blank">Docker Hub</a>\n:\n\nEach Archway network uses a different version of Archway. To connect your node to a network, you should use a tag with the corresponding network name.\n\n\n\n For example, to connect to the Constantine testnet:\n::highlight-card\n\n```bash\ndocker pull archwaynetwork/archwayd:constantine\n```\n\n::\n::alert{variant="info"}\nMake sure to always use the image tag that points to the network you want to connect.\n#title\nINFO\n::\n\n\nPlease note that the latest Docker image corresponds to the Titus experimental testnet. Titus is not completely stable, and it is suggested not relying on it.\n\n::highlight-card\n\n```bash\ndocker pull archwaynetwork/archwayd:latest\n```\n\n::\n\n### **Set up the PATH**\n\n\nBy default, the Docker image runs the `archwayd` binary, so you should specify the arguments for `archwayd` right after the image name. For better usage, mount an external volume at `/root/.archway` to persist the daemon home path across different runs. For example, if you want to add a key:\n::highlight-card\n\n```bash\ndocker run --rm -it \\\n  -v ~/.archway:/root/.archway \\\n  archwaynetwork/archwayd:latest \\\n  keys add test-key\n```\n\n::\nAnd then list all keys:\n::highlight-card\n\n```bash\ndocker run --rm -it \\\n  -v ~/.archway:/root/.archway \\\n  archwaynetwork/archwayd:latest \\\n  keys list\n```\n\n::\nIt\'s also important to notice that, when running a node in a network, you\'ll need to expose the container ports for external connectivity. The image exposes the following ports:\n\n- `1317`: Rest server\n- `26656`: Tendermint P2P\n- `26657`: Tendermint RPC\n\n::alert{variant="success"}\nTo simplify using the Docker container, you can set an alias with the home path and the proper image tag (replacing `<network-name>`), like:\n::highlight-card\n\n```bash\nalias archwayd="docker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<network-name>"\n```\n\n::\n\n#title\nTIP\n::\n\nAfter setting the alias with the above tip, you can use the other `archwayd` commands without typing the verbose Docker run command.\nFor the sake of comprehensive documentation, the full Docker command is shown. Just remember that by setting the alias you can simply use `archwayd` instead of the Docker command :)\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Initialize the Node\n\n\nInitialize the **genesis.json** file that is required to establish a network.\nYou will also need to choose a **moniker** for your node, which is the name that will appear on the blockexplorer once you will start validating.\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd init <moniker> --chain-id <chain>\n```\n\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:$NETWORK_NAME \\\n  init <moniker> --chain-id <chain>\n```\n\n::\n\n::\n\nFor example, for the Constaine network:\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd init my-cool-moniker --chain-id constantine\n```\n\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run -v ${HOME}/.archway:/root/.archway docker.io/archwaynetwork/archwayd:constantine  init my-cool-moniker --chain-id constantine-1\n```\n\n::\n\n::\n\n\n<!-- ## Starting the Node\n\nStarting a node now will give you an error message like the one below. This is because at least one validator node must be connected for the network to run.\n::highlight-card\n\n```bash\narchwayd start\n\nError: error during handshake: error on replay: validator set is nil in genesis and still empty after InitChain\n```\n\n::\nTHIS SECTION IS CONFUSING\n-->\n## Next Steps\n\nNow it is time to set up your [node\'s keys](keys.md)',
    modified: 1678275989.415273,
    group: 'validators',
    viewed: 26,
    objectID: 'validators|node|install',
    _highlightResult: {
      title: { value: 'Node Installation', matchLevel: 'none', matchedWords: [] },
      content: {
        value:
          '# Node Installation\n\nThis guide explains how to install and run an Archway full node.\n\n\n## Build archwayd from Source\n\n\n### **Clone the repository**\nNow let\'s get the source code from the <a href="https://github.com/archway-network/archway" target="_blank">Archway Repository</a>.\n::highlight-card\n\n```bash\n\ngit clone https://github.com/archway-network/archway.git\n\ncd archway\n\ngit fetch\n\ngit checkout <version-tag>\n\n```\n\n::\n\n::alert{variant="info"}\nFor connecting to the Constantine Developer Testnet, the version tag `v0.2.0` should be used:\n\n`git checkout v0.2.0`\n\n#title\nINFO\n::\n\n### **Build archwayd**\nLet\'s build and install the `archwayd` daemon:\n::highlight-card\n\n```bash\nmake install\n```\n\n::\nConfirm that the installation has been completed by running the following command:\n::highlight-card\n\n```bash\narchwayd version\n\n#1.2.3\n```\n\n::\n\n## Build archwayd with Docker\n\nMake sure you have <a href="https://docs.docker.com/get-docker" target="_blank" title="Install Docker">Docker</a> installed on your machine. \n\n\n::alert{variant="warning"}\nFor Linux users, it\'s recommended to run the Docker daemon in <a href="https://docs.docker.com/engine/security/rootless/" target="_blank" title="Docker Rootless mode">Rootless Mode</a>.\n#title\nWARNING\n::\n\n\n\n### **Pull the Docker image**\n\nPull the image from <a href="https://hub.docker.com/r/archwaynetwork/archwayd" target="_blank">Docker Hub</a>\n:\n\nEach Archway network uses a different version of Archway. To connect your node to a network, you should use a tag with the corresponding network name.\n\n\n\n For example, to connect to the Constantine testnet:\n::highlight-card\n\n```bash\ndocker pull archwaynetwork/archwayd:constantine\n```\n\n::\n::alert{variant="info"}\nMake sure to always use the image tag that points to the network you want to connect.\n#title\nINFO\n::\n\n\nPlease note that the latest Docker image corresponds to the Titus experimental testnet. Titus is not completely stable, and it is suggested not relying on it.\n\n::highlight-card\n\n```bash\ndocker pull archwaynetwork/archwayd:latest\n```\n\n::\n\n### **Set up the PATH**\n\n\nBy default, the Docker image runs the `archwayd` binary, so you should specify the arguments for `archwayd` right after the image name. For better usage, mount an external volume at `/root/.archway` to persist the daemon home path across different runs. For example, if you want to add a key:\n::highlight-card\n\n```bash\ndocker run --rm -it \\\n  -v ~/.archway:/root/.archway \\\n  archwaynetwork/archwayd:latest \\\n  keys add test-key\n```\n\n::\nAnd then list all keys:\n::highlight-card\n\n```bash\ndocker run --rm -it \\\n  -v ~/.archway:/root/.archway \\\n  archwaynetwork/archwayd:latest \\\n  keys list\n```\n\n::\nIt\'s also important to notice that, when running a node in a network, you\'ll need to expose the container ports for external connectivity. The image exposes the following ports:\n\n- `1317`: Rest server\n- `26656`: Tendermint P2P\n- `26657`: Tendermint RPC\n\n::alert{variant="success"}\nTo simplify using the Docker container, you can set an alias with the home path and the proper image tag (replacing `<network-name>`), like:\n::highlight-card\n\n```bash\nalias archwayd="docker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:<network-name>"\n```\n\n::\n\n#title\nTIP\n::\n\nAfter setting the alias with the above tip, you can use the other `archwayd` commands without typing the verbose Docker run command.\nFor the sake of comprehensive documentation, the full Docker command is shown. Just remember that by setting the alias you can simply use `archwayd` instead of the Docker command :)\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Initialize the Node\n\n\nInitialize the **genesis.json** file that is required to establish a network.\nYou will also need to choose a **moniker** for your node, which is the name that will appear on the blockexplorer once you will start validating.\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd init <moniker> --chain-id <chain>\n```\n\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run --rm -it -v ~/.archway:/root/.archway archwaynetwork/archwayd:$NETWORK_NAME \\\n  init <moniker> --chain-id <chain>\n```\n\n::\n\n::\n\nFor example, for the Constaine network:\n\n::tab-card{noOfTabs=2}\n#title0\nBinary\n\n#desc0\n::highlight-card\n\n```bash\narchwayd init my-cool-moniker --chain-id constantine\n```\n\n::\n\n#title1\nDocker\n\n#desc1\n::highlight-card\n\n```bash\ndocker run -v ${HOME}/.archway:/root/.archway docker.io/archwaynetwork/archwayd:constantine  init my-cool-moniker --chain-id constantine-1\n```\n\n::\n\n::\n\n\n<!-- ## Starting the Node\n\nStarting a node now will give you an error message like the one below. This is because at least one validator node must be connected for the network to run.\n::highlight-card\n\n```bash\narchwayd start\n\nError: error during handshake: error on replay: validator set is nil in genesis and still empty after InitChain\n```\n\n::\nTHIS SECTION IS CONFUSING\n-->\n## Next Steps\n\nNow it is time to set up your [node\'s keys](keys.md)',
        matchLevel: 'none',
        matchedWords: [],
      },
      modified: { value: '1678275989.415273', matchLevel: 'none', matchedWords: [] },
      viewed: { value: '26', matchLevel: 'none', matchedWords: [] },
    },
  },
  {
    title: 'Validator Requirements',
    description: 'Look into the requirements and tips for validating on Archway',
    parentSection: 'Run a node',
    content:
      '# Validator Requirements\n\nValidators should rely on one or more data center locations with redundant power, networking, firewalls, HSMs,  servers, and storage backups.\n\n\nArchway network requirements are expected to be low initially, as the current testnet requires minimal resources. Bandwidth, CPU, and memory requirements rise as the network grows. Large hard drives are recommended for storing years of blockchain history.\n\nListed below are the technical requirements to validate in the Archway Network.\n\n\n## Minimum Hardware requirements\n\n\nWe expect that a modest level of hardware specifications is initially needed and might rise as network use increases. Participating in the testnet is the best way to learn more. Below are the Hardware specifications:\n\n- Linux distribution\n- x86_64 processor\n- 16 GB RAM\n- 500 GB to 2 TB storage\\*\n- Storage size for validators depends on the level of desired pruning.\n\n\n## Bandwidth requirements\n\nWe recommend that the data center nodes connect only to trusted full nodes in the cloud or other validators that know each other socially. This relieves the data center node from the burden of mitigating denial-of-service attacks.\n\nUltimately, as the network becomes more heavily used, multi-gigabyte per day bandwidth is very realistic.\n\n## Monitoring and Alerting\nMonitoring and alerting systems are really useful to avoid slashing. Even if Phi Labs do not suggest any specific solution, we document the [Prometheus + Graphana](4.monitoring-validators.md) combination. Other tools that are usually used by validators in CosmosSDK-based blockchains are also: DataDog, Panic, Cloudwatch, Netdata, Tenderduty.\n## Security\n\n### **Key management**\n\nIt is critical that an attacker cannot steal a validator\'s private key, as the entire stake delegated to the compromised validator is at risk. Hardware security modules are an important strategy for mitigating this risk.\n\nValidators are expected to run an HSM that supports ed25519 keys. Here are potential options:\n\n- YubiHSM 2\n- Ledger Nano S/X\n- Ledger BOLOS SGX enclave\n- Thales nShield support\n\nThe Phi Labs team does not recommend a particular HSM option. The community is encouraged to bolster the effort to improve HSMs and the security of key management.\n\n\n### **Sentry Nodes (DDOS Protection)**\n\nDenial-of-service attacks occur when an attacker sends a flood of internet traffic to an IP address to prevent the server at the IP address from connecting to the internet.\n\nAn attacker that scans the network, can try to learn the IP address of various validator nodes and disconnect them from communication by flooding them with traffic.\n\nOne recommended way to mitigate these risks is for validators to carefully structure their network topology in a so-called **sentry node architecture**.\n\nValidator nodes are expected to connect only to full-nodes they trust because they operate them themselves or are run by other validators they know socially. Validator nodes may run data centers that provide direct links to the networks of major cloud providers. The validator can use those links to connect to sentry nodes in the cloud. This shifts the burden of denial-of-service from the validator\'s node directly to its sentry nodes, and may require new sentry nodes to be spun up or activated to mitigate attacks on existing ones.\n\nSentry nodes can be quickly spun up or change their IP addresses. Because the links to the sentry nodes are in private IP space, an internet-based attack cannot disturb the sentry nodes directly. Sentry nodes ensure validator block proposals and votes always make it to the rest of the network.\n\nIt is expected that good operating procedures on the part of validators completely mitigate these threats.\n\nIf multiple sentry nodes are being used, load balancing can be used to distribute incoming traffic across the nodes. This can help prevent any single node from being overwhelmed by traffic and reduce the risk of a DoS attack.\n\nFor more on sentry node architecture, you can have a look at:\n- <a href="https://forum.cosmos.network/t/sentry-node-architecture-overview/454" target="_blank">Cosmos forum post</a>\n\n- <a href="https://medium.com/@kidinamoto/tech-choices-for-cosmos-validators-27c7242061ea" target="_blank">Medium Article on sentry nodes architecture</a>\n\n### **Firewalls** \nA firewall uses predetermined rules to filter incoming and outgoing traffic, by blocking suspicious requests. A properly configured VPS firewall will block all connections to ports that are not used by any legitimate services. Firewalls help to stop attacks and threats that can lead to outages or server takeovers. For example, you can set up your firewall to have the necessary ports only open to sentry nodes.\n\n### **SSH keys**\nWhen setting up a validator on an instance, keep in mind that SSH keys are more difficult to hack than passwords, as SSH keys can be up to 4096 bits in length and are typically at least 1024 bits long ( which is the security equivalent of a 12 characters password)\nAlso, SSH keys are more robust than passwords against compromises on the server-side, as even if the server is compromised, your SSH key remains safe. The SSH key remains on the client-side and no secret value is ever sent to the server\nAs the SSH key is stored on a device, keep in mind that you should protect the key with a passphrase( to defend your SSH key in case the device gets compromised). Make sure to securely back up your SSH keys.\n\n### **Dedicated Server and Auditing**\nTry using a dedicated server, without unnecessary services. This will minimize the attack surface. Keep in mind using auditing tools to perform in-depth security scans. This will help test security defenses and enhance system hardening, Keep your operating system updated and dependencies updated, as doing so will help protect against vulnerabilities\n\n## Next Steps\nNow, let\'s start [run the validator](3.running-a-validator-node.md)',
    modified: 1678275989.415273,
    group: 'validators',
    viewed: 18,
    objectID: 'validators|requirements',
    _highlightResult: {
      title: { value: 'Validator Requirements', matchLevel: 'none', matchedWords: [] },
      description: { value: 'Look into the requirements and tips for validating on Archway', matchLevel: 'none', matchedWords: [] },
      content: {
        value:
          '# Validator Requirements\n\nValidators should rely on one or more data center locations with redundant power, networking, firewalls, HSMs,  servers, and storage backups.\n\n\nArchway network requirements are expected to be low initially, as the current testnet requires minimal resources. Bandwidth, CPU, and memory requirements rise as the network grows. Large hard drives are recommended for storing years of blockchain history.\n\nListed below are the technical requirements to validate in the Archway Network.\n\n\n## Minimum Hardware requirements\n\n\nWe expect that a modest level of hardware specifications is initially needed and might rise as network use increases. Participating in the testnet is the best way to learn more. Below are the Hardware specifications:\n\n- Linux distribution\n- x86_64 processor\n- 16 GB RAM\n- 500 GB to 2 TB storage\\*\n- Storage size for validators depends on the level of desired pruning.\n\n\n## Bandwidth requirements\n\nWe recommend that the data center nodes connect only to trusted full nodes in the cloud or other validators that know each other socially. This relieves the data center node from the burden of mitigating denial-of-service attacks.\n\nUltimately, as the network becomes more heavily used, multi-gigabyte per day bandwidth is very realistic.\n\n## Monitoring and Alerting\nMonitoring and alerting systems are really useful to avoid slashing. Even if Phi Labs do not suggest any specific solution, we document the [Prometheus + Graphana](4.monitoring-validators.md) combination. Other tools that are usually used by validators in CosmosSDK-based blockchains are also: DataDog, Panic, Cloudwatch, Netdata, Tenderduty.\n## Security\n\n### **Key management**\n\nIt is critical that an attacker cannot steal a validator\'s private key, as the entire stake delegated to the compromised validator is at risk. Hardware security modules are an important strategy for mitigating this risk.\n\nValidators are expected to run an HSM that supports ed25519 keys. Here are potential options:\n\n- YubiHSM 2\n- Ledger Nano S/X\n- Ledger BOLOS SGX enclave\n- Thales nShield support\n\nThe Phi Labs team does not recommend a particular HSM option. The community is encouraged to bolster the effort to improve HSMs and the security of key management.\n\n\n### **Sentry Nodes (DDOS Protection)**\n\nDenial-of-service attacks occur when an attacker sends a flood of internet traffic to an IP address to prevent the server at the IP address from connecting to the internet.\n\nAn attacker that scans the network, can try to learn the IP address of various validator nodes and disconnect them from communication by flooding them with traffic.\n\nOne recommended way to mitigate these risks is for validators to carefully structure their network topology in a so-called **sentry node architecture**.\n\nValidator nodes are expected to connect only to full-nodes they trust because they operate them themselves or are run by other validators they know socially. Validator nodes may run data centers that provide direct links to the networks of major cloud providers. The validator can use those links to connect to sentry nodes in the cloud. This shifts the burden of denial-of-service from the validator\'s node directly to its sentry nodes, and may require new sentry nodes to be spun up or activated to mitigate attacks on existing ones.\n\nSentry nodes can be quickly spun up or change their IP addresses. Because the links to the sentry nodes are in private IP space, an internet-based attack cannot disturb the sentry nodes directly. Sentry nodes ensure validator block proposals and votes always make it to the rest of the network.\n\nIt is expected that good operating procedures on the part of validators completely mitigate these threats.\n\nIf multiple sentry nodes are being used, load balancing can be used to distribute incoming traffic across the nodes. This can help prevent any single node from being overwhelmed by traffic and reduce the risk of a DoS attack.\n\nFor more on sentry node architecture, you can have a look at:\n- <a href="https://forum.cosmos.network/t/sentry-node-architecture-overview/454" target="_blank">Cosmos forum post</a>\n\n- <a href="https://medium.com/@kidinamoto/tech-choices-for-cosmos-validators-27c7242061ea" target="_blank">Medium Article on sentry nodes architecture</a>\n\n### **Firewalls** \nA firewall uses predetermined rules to filter incoming and outgoing traffic, by blocking suspicious requests. A properly configured VPS firewall will block all connections to ports that are not used by any legitimate services. Firewalls help to stop attacks and threats that can lead to outages or server takeovers. For example, you can set up your firewall to have the necessary ports only open to sentry nodes.\n\n### **SSH keys**\nWhen setting up a validator on an instance, keep in mind that SSH keys are more difficult to hack than passwords, as SSH keys can be up to 4096 bits in length and are typically at least 1024 bits long ( which is the security equivalent of a 12 characters password)\nAlso, SSH keys are more robust than passwords against compromises on the server-side, as even if the server is compromised, your SSH key remains safe. The SSH key remains on the client-side and no secret value is ever sent to the server\nAs the SSH key is stored on a device, keep in mind that you should protect the key with a passphrase( to defend your SSH key in case the device gets compromised). Make sure to securely back up your SSH keys.\n\n### **Dedicated Server and Auditing**\nTry using a dedicated server, without unnecessary services. This will minimize the attack surface. Keep in mind using auditing tools to perform in-depth security scans. This will help test security defenses and enhance system hardening, Keep your operating system updated and dependencies updated, as doing so will help protect against vulnerabilities\n\n## Next Steps\nNow, let\'s start [run the validator](3.running-a-validator-node.md)',
        matchLevel: 'none',
        matchedWords: [],
      },
      modified: { value: '1678275989.415273', matchLevel: 'none', matchedWords: [] },
      viewed: { value: '18', matchLevel: 'none', matchedWords: [] },
    },
  },
  {
    title: 'Introduction to Validating',
    description: 'Learn how to validate on Archway',
    parentSection: 'Run a node',
    content:
      '# Overview\n\nArchway is a Proof of Stake (PoS) blockchain based on the <a href="https://tendermint.com/core/" target="_blank">Tendermint</a> consensus engine, which is considered to be the golden standard for BFT-based consensus mechanisms. As a consequence, validators participate in the consensus protocol by proposing new blocks and receiving staking rewards in return. Those rewards are split between delegators proportionally to the delegation amounts, while the commission fees are instead credited to the validator itself.\n\nValidators need to be in the active set in order to let their delegators earn rewards. The active set is the list of validators that have enough weight (i.e. voting power) to be included in the active set. The weight of a validator is directly proportional to the amount of the delegated tokens that have been delegated to it. Just as a reference, the active set for chains built with the Cosmos SDK usually varies between 50 and 150.\n\nValidators participate in the consensus protocol by broadcasting votes which contain cryptographic signatures signed by each validator\'s private key. Validator candidates can bond their own `ARCH` or have `ARCH` delegated or staked to them by token holders. Have a look at [Delegating](/community/staking#delegating).\n\n\n::alert{variant="info"}\nPlease note that the Constantine test network is currently not open to additional validators. Stay tuned on <a href="https://discordapp.com/channels/892203409418092615/901065455165399070" target="_blank">Discord</a>\n for further updates on this topic.\n\nAnyways, you can still run a node on Constantine (without validating) or validate in a [local testnet](5.running-a-local-testnet.md)\n\n#title\nINFO\n::\n\n\n\n\n## Slashing\n\n\nSlashing is the mechanism that penalizes validators (and consequently their delegators) for misbehaving.\n\nValidators need to be careful in adopting the necessary measures to prevent being slashed, as the funds of both the validator and its delegators are subjected to slashing penalties.\n\nMisbehaviors subjected to slashing include:\n\n**Downtime** (soft slashing)\nWhen a validator is offline and does not participate in block signing for a certain amount of time, it gets slashed. Slashing leads to a small loss of staked tokens, on top of not earning new rewards for the duration of the downtime.\n\n**Double signing** (hard slashing)\nDouble signing occurs when a validator uses its private keys to sign multiple blocks at the same time. The penalty is considerably higher, as it involves a higher loss of staked tokens, jail time for the validator, and an unbonding time for the delegator tokens (during which delegators stop gaining rewards)\n\n\n## Considerations:\n\n\n- **Technical requirements:** To run a validator node, you need to have a dedicated server with sufficient computing power, storage, and bandwidth. You will also need to install and configure the appropriate software and any additional tools you plan to use (such as monitoring software).\n\n- **Security:** Running a validator node involves holding a significant amount of cryptocurrency, so security is critical. You need to take appropriate steps to secure your server, including setting up firewalls, using strong passwords, and enabling encryption. You should also consider using hardware security modules (HSMs) to secure your private keys.\n\n- **Maintainance:**\nSuccessful validation requires the efforts of multiple highly skilled individuals and continuous operational attention. You should be able to promptly\nrespond to attacks, outages, and handle software updates to accommodate protocol upgrades and bug fixes. These activities require substantial vigilance.\n\n- **Operational Costs:** Running a validator can be a profitable activity, especially if your services are reliable and your credibility is high. Depending on your infrastructure, you may incur considerable operational costs. Handle your costs appropriately in order to avoid inefficiencies, but never neglect security and reliability.\n\n- **Governance:** Validators are elected by delegators who stake their cryptocurrency with them. Participating in governance by voting on proposals helps establish a stronger relationship with delegators.\n\n\n# Tips\n\n- Engage with the community on a regular basis, as this is key to attracting delegators and building a reputation. It is valuable to be active on Discord and nurture relationships with other validators\n\n- Build tools for the ecosystem, and contribute with your knowledge and support. Proactively helping in growing the ecosystem is an effective way to demonstrate your credibility.\n\n- Set up a website for your validator operations. This can include information about your validator, your team, and any additional services you may offer.\n\n- Develop a social media strategy to promote your validator. This can include creating a Twitter account, publishing regular blog posts, and engaging with the community on Discord or other forums.\n\n- Set up a website. This can enhance the credibility of your validator, and provide useful information to attract delegators.\n\n<!-- ## Set Up a Website\n\nSet up a dedicated validator\'s website and signal your intention to become a validator on our [forum](https://forum.cosmos.network/t/validator-candidates-websites/127/3). This is important since delegators will want to have information about the entity they are delegating their Atoms to. -->\n\n## Next Steps\nRunning a validator is an important task. Make sure you are aware of the [requirements](2.requirements.md).\n\n\nAlso, you are welcome to join the <a href="https://discordapp.com/channels/892203409418092615/901065455165399070" target="_blank">Archway Discord</a> server. It will be easier to learn more about becoming an Archway validator.',
    modified: 1678275989.415273,
    group: 'validators',
    viewed: 15,
    objectID: 'validators|overview',
    _highlightResult: {
      title: { value: 'Introduction to Validating', matchLevel: 'none', matchedWords: [] },
      description: { value: 'Learn how to validate on Archway', matchLevel: 'none', matchedWords: [] },
      content: {
        value:
          '# Overview\n\nArchway is a Proof of Stake (PoS) blockchain based on the <a href="https://tendermint.com/core/" target="_blank">Tendermint</a> consensus engine, which is considered to be the golden standard for BFT-based consensus mechanisms. As a consequence, validators participate in the consensus protocol by proposing new blocks and receiving staking rewards in return. Those rewards are split between delegators proportionally to the delegation amounts, while the commission fees are instead credited to the validator itself.\n\nValidators need to be in the active set in order to let their delegators earn rewards. The active set is the list of validators that have enough weight (i.e. voting power) to be included in the active set. The weight of a validator is directly proportional to the amount of the delegated tokens that have been delegated to it. Just as a reference, the active set for chains built with the Cosmos SDK usually varies between 50 and 150.\n\nValidators participate in the consensus protocol by broadcasting votes which contain cryptographic signatures signed by each validator\'s private key. Validator candidates can bond their own `ARCH` or have `ARCH` delegated or staked to them by token holders. Have a look at [Delegating](/community/staking#delegating).\n\n\n::alert{variant="info"}\nPlease note that the Constantine test network is currently not open to additional validators. Stay tuned on <a href="https://discordapp.com/channels/892203409418092615/901065455165399070" target="_blank">Discord</a>\n for further updates on this topic.\n\nAnyways, you can still run a node on Constantine (without validating) or validate in a [local testnet](5.running-a-local-testnet.md)\n\n#title\nINFO\n::\n\n\n\n\n## Slashing\n\n\nSlashing is the mechanism that penalizes validators (and consequently their delegators) for misbehaving.\n\nValidators need to be careful in adopting the necessary measures to prevent being slashed, as the funds of both the validator and its delegators are subjected to slashing penalties.\n\nMisbehaviors subjected to slashing include:\n\n**Downtime** (soft slashing)\nWhen a validator is offline and does not participate in block signing for a certain amount of time, it gets slashed. Slashing leads to a small loss of staked tokens, on top of not earning new rewards for the duration of the downtime.\n\n**Double signing** (hard slashing)\nDouble signing occurs when a validator uses its private keys to sign multiple blocks at the same time. The penalty is considerably higher, as it involves a higher loss of staked tokens, jail time for the validator, and an unbonding time for the delegator tokens (during which delegators stop gaining rewards)\n\n\n## Considerations:\n\n\n- **Technical requirements:** To run a validator node, you need to have a dedicated server with sufficient computing power, storage, and bandwidth. You will also need to install and configure the appropriate software and any additional tools you plan to use (such as monitoring software).\n\n- **Security:** Running a validator node involves holding a significant amount of cryptocurrency, so security is critical. You need to take appropriate steps to secure your server, including setting up firewalls, using strong passwords, and enabling encryption. You should also consider using hardware security modules (HSMs) to secure your private keys.\n\n- **Maintainance:**\nSuccessful validation requires the efforts of multiple highly skilled individuals and continuous operational attention. You should be able to promptly\nrespond to attacks, outages, and handle software updates to accommodate protocol upgrades and bug fixes. These activities require substantial vigilance.\n\n- **Operational Costs:** Running a validator can be a profitable activity, especially if your services are reliable and your credibility is high. Depending on your infrastructure, you may incur considerable operational costs. Handle your costs appropriately in order to avoid inefficiencies, but never neglect security and reliability.\n\n- **Governance:** Validators are elected by delegators who stake their cryptocurrency with them. Participating in governance by voting on proposals helps establish a stronger relationship with delegators.\n\n\n# Tips\n\n- Engage with the community on a regular basis, as this is key to attracting delegators and building a reputation. It is valuable to be active on Discord and nurture relationships with other validators\n\n- Build tools for the ecosystem, and contribute with your knowledge and support. Proactively helping in growing the ecosystem is an effective way to demonstrate your credibility.\n\n- Set up a website for your validator operations. This can include information about your validator, your team, and any additional services you may offer.\n\n- Develop a social media strategy to promote your validator. This can include creating a Twitter account, publishing regular blog posts, and engaging with the community on Discord or other forums.\n\n- Set up a website. This can enhance the credibility of your validator, and provide useful information to attract delegators.\n\n<!-- ## Set Up a Website\n\nSet up a dedicated validator\'s website and signal your intention to become a validator on our [forum](https://forum.cosmos.network/t/validator-candidates-websites/127/3). This is important since delegators will want to have information about the entity they are delegating their Atoms to. -->\n\n## Next Steps\nRunning a validator is an important task. Make sure you are aware of the [requirements](2.requirements.md).\n\n\nAlso, you are welcome to join the <a href="https://discordapp.com/channels/892203409418092615/901065455165399070" target="_blank">Archway Discord</a> server. It will be easier to learn more about becoming an Archway validator.',
        matchLevel: 'none',
        matchedWords: [],
      },
      modified: { value: '1678275989.415273', matchLevel: 'none', matchedWords: [] },
      viewed: { value: '15', matchLevel: 'none', matchedWords: [] },
    },
  },
  {
    title: 'About Archway',
    description: 'Provides an overview of Archway, a smart contract platform built on CosmWasm',
    parentSection: 'Overview',
    content:
      '# About Archway\n\nArchway is an incentivized smart contract platform that rewards developers for building on the network with baked-in incentives and rewards.\n\nThe protocol provides developers with the tools to quickly build and launch scalable cross-chain dapps and receive rewards for the value that the dApps contribute to the network.\n\n## The Archway Mission\n\nThe overarching goal of Archway is to foster an array of diverse and sustainable applications by empowering and rewarding developers who build on the network.\n\nThe internet has helped democratize access to information, but it hasn\'t fully democratized access to capital and value. The mission of Archway is to ensure that entrepreneurs and developers worldwide have access to opportunities comparable to those of their counterparts in more developed nations.\n\nBuilt into the protocol, Archway rewards developers based on the value and impact of their dapp, rather than based on their connections or close ties to funding. This will level the playing field for many who are locked out of the world of raising capital.\n\nUnlike early Web 3 and Web 2.0 platforms, entrepreneurs and developers building on Archway receive an actual stake in the growth and governance of the protocol itself, as all contributors are rewarded.\n\n<!-- Architecture -->\n\n## Architectural Overview\n\nArchway is a Cosmos SDK blockchain powered by <a href="https://tendermint.com/" target="_blank">Tendermint</a> for the networking and consensus layers. The network utilizes modified Cosmos modules to manage the inflation and rewards systems, including:\n\n- **Minting** - Responsible for minting tokens and managing inflation.\n- **CosmWasm** - A runtime for WebAssembly Smart Contracts.\n- **Staking** - Manages changes to validators.\n- **Governance** - Supports the one-vote-per-token voting and governance system for token holders.\n- **IBC** - Inter-Blockchain Communication protocol that enables asset transfers across Cosmos blockchains.\n\nIn addition to using the predefined Cosmos modules, Archways employs two custom modules for additional network features:\n\n- **Rewards** - Calculates and distributes rewards to smart contracts based on the transaction volume it brings to the network.\n- **Tracking** - Enables the tracking of gas consumption on a per-transaction basis.\n\nArchway creates a Cosmos SDK-based chain with support for WASM smart contract execution that rewards developers for using their deployed smart contracts.\n\nThe combination of both predefined Cosmos modules and custom Archway modules allows the network to deliver the following features:\n\n- [Fee reward to the developers](#economic-overview)\n- [Gas rebate to end users](#gas-rebates)\n- [Smart contract premium fee](#smart-contract-fees)\n- [Inflation rewards](#inflation)\n\n## Smart Contracts\n\nThe Archway protocol uses [CosmWasm](/overview/glossary#cosmwasm), WebAssembly (Wasm), Go, and Rust. Over 40 high-level programming languages support Wasm, including C and C++, TypeScript, Python, and Java.\n\n### **Difference Between Smart Contracts and Cosmos Chains**\n\nWhile Cosmos makes it easier for developers to create their self-sovereign chains, developers still need to attract and sufficiently incentivize a strong community of validators to run the network. In many cases, it makes sense for a project to deploy as a dapp first.\n\nConsider the following tradeoffs between building your core logic as a smart contract versus building your logic as an independent Cosmos blockchain.\n\n|          Goal           | Cosmos Chain | Smart Contract |\n| :---------------------: | :----------: | :------------: |\n|  Speed of development   |      -       |       +        |\n|   Ease of development   |      -       |       +        |\n|   Complexity of logic   |      +       |       +        |\n|  Maintenance overhead   |      -       |       +        |\n| Level of customization  |      +       |       -        |\n| Strict resource control |      -       |       +        |\n|  Native chain features  |      +       |       -        |\n|       Scalability       |      +       |       +        |\n\n<!-- Architecture : Modules -->\n\n## Module Specifications\n\nThese Archway-specific modules extend the functionality of the Cosmos SDK.\n\n### Gas Tracking\n\nTo achieve the Archway architecture [desired properties](#the-archway-mission), the gas tracking module follows this design:\n\n1. Wrap the [CosmWasm](/overview/glossary#cosmwasm) VM with an Archway GasMeter to allow interception and tracking of information passed by the VM.\n\n2. During BeginBlock, the recorded information is brought to memory and processed to determine rewards for each of the contracts executed in the last block.\n\n3. Rewards are calculated at a later block than the correspondent transaction with the smart contract\n\nRewards need to be intentionally claimed through a separate transaction. Also note that while the owner address is allowed to change smart contract metadata, rewards can be claimed **only** by the address specified for receiving rewards\n\n#### Drawbacks\n\nThe Cosmos SDK does not support post-transaction processing. Archway takes into account GasLimit instead of actual gas consumption by the transaction. The good news is that the Cosmos SDK could potentially have post-transaction functionality in the future.\n\n<!-- Economics -->\n\n## Economic Overview\n\nWith Archway, dapps can earn a portion of transaction fees and inflationary rewards in exchange for their contributions to the network. This earning model is similar to how validators are rewarded for operating nodes in a typical Proof-of-Stake (PoS) chain.\n\nArchway seeks to provide three potential funding sources for dapps:\n\n- [Gas fee rebates](#gas-rebates)\n- [Share of inflationary rewards](#inflation)\n- [Smart contract fees (optional)](#smart-contract-fees)\n\nArchway allows each dapp developer and their community to configure how rewards are managed and distributed. When a contract is instantiated, the dapp creator specifies an `owner` address where all fees and rewards are automatically deposited. This target address can be the creator\'s address, a multisig address, or an address that is controlled by a separate custom contract. Ownership can then be transferred to a new address as needed. Ownership transfer requires only the signature of the previous owner.\n\n<!-- Economics : Gas Rebates -->\n\n### Gas Rebates\n\nUnlike other smart contract platforms, Archway does not burn gas fees or distribute them entirely to validators or miners. Instead, the collected gas fees are split between dapp developers and validators.\n\nAt network launch, gas fees are divided evenly, with 50% going to dapp developers and 50% to validators. The network provides configurable parameters that can be adjusted over time to determine the optimal gas rebate distribution between validators and dapps.\n\nFrom the dapp developer\'s perspective, a contract receives a 50% rebate on all gas paid. From the validator\'s perspective, deferring a portion of rewards in the near term effectively drives transaction volume, fees, and increases the value of the underlying network in the future.\n\nIt would not be profitable for an attacker to spam transactions on the network as gas rebates recoup only part of the fees paid (50%). As an additional safeguard against potential abuse and to prevent the deployment of spam contracts, gas fees are higher for uploading new contracts than for routine transactions. Gas fees are still sufficiently low to allow smaller projects to upload contracts.\n\nGas fee rebates are automatically paid out by the network on a per-block basis.\n\n<!-- Economics : Inflation -->\n\n### Inflation\n\nThe overall inflation rate on the Archway network follows the model of the <a href="https://github.com/gavinly/CosmosParametersWiki/blob/master/Mint.md" target="_blank">mint module</a> in the Cosmos Hub, with total token supply increasing between 7% and 20% annually, depending on the ratio of tokens that are actively staked on the network.\n\nThe Archway protocol then shares a portion of these total inflation rewards directly with dapps. At genesis, 25% of inflation rewards go to dapp developers and 75% go to validators. For example, if the network sees total annual inflation of 8%, then 2% goes to dapps and 6% goes to validators. These distribution values are configurable parameters that can be adjusted by the Archway community through network governance.\n\nThe dapp rewards pool (2% in the previous example) is then proportionally distributed based on the relative amount of gas fees that each dapp generates within a given epoch. For example, a dapp that is responsible for 10% of gas consumption is awarded 10% of the available pool.\n\nTo mitigate potential Sybil attacks and prevent spamming transactions from being profitable, each dapp has a max inflation rewards cap. At network launch, there is a hard cap based on the total gas fees paid per dapp. A contract deployed to Archway cannot earn rewards greater than the total gas it generates within an epoch. The implementation of a dynamic rewards cap is being actively researched and can be updated through future governance. Transitioning to a floating cap provides more flexible distribution and further incentivizes developers to continuously improve their dapps.\n\nAny surplus in rewards is contributed to the Archway community pool where the funds are managed through governance.\n\nInflationary rewards are paid out by the network on a per-block basis.\n\n### Smart Contract Fees\n\nSmart contract platforms today charge network fees (“gas”) based on the amount of computational processing required by on-chain transactions. While this method of measurement works for the underlying economics of a network, it does not support use cases where a developer has to cover additional costs, such as distributed storage, access to off-chain processing, external data sources, or other premium features such as audited and insured contracts.\n\nWith Archway, developers of dapps can define custom fees for interacting with their smart contracts. Also known as the _take rate_, this fee provides developers with a flexible option to charge different fee levels that are based on their specific use case and operational needs.\n\nBy default, the smart contract fee is set to 0 $ARCH. On initial deployment, the dapp developer can define their fee. The fee is configurable and the dapp owner can adjust it at any time, even after the contract has been deployed.\n\nTo streamline the user experience, the smart contract fee is embedded directly into the network fee, so end users are simply presented with a single combined fee when signing a transaction.\n\nSince most dapps are composed of smaller, more modular pieces of code and layers of contracts, individual developers can focus on building even smaller snippets of code. They can write and monetize a single contract rather than a fully featured dapp. Since contracts can be integrated into multiple dapps, developers can earn multiple lines of fees across any user base that interacts with their code. Imagine, for example, the rapid app development that would happen if every NPM package earned fees for computational use.\n\n<!-- Economics : Examples -->\n\n### Example Use Cases\n\nDapps can choose to allocate the rewards they accrue in whatever way is most beneficial to their ecosystem. For instance, rewards can be [redistributed to governance token holders](#governance-rewards), used to [support core development teams](#support-the-core-development-team), [cover users’ gas fees](#subsidize-gas-payments), [seed liquidity pools](#boost-liquidity-mining-programs), [contribute to a community DAO](#fund-a-decentralized-autonomous-organization-dao), open project bounties, sponsor events or hackathons, and much more.\n\n#### Governance Rewards\n\nA recent trend has dapps issuing governance tokens to incentivize and bootstrap early communities. This token distribution has proven to be very successful in a number of cases, despite the dapp not having any clear mechanism for value capture from fees or revenues. Some of these tokens merely grant voting rights, but have still been the subject of intense growth due to speculation of the future utility of the dapp or the potential rights to cash flows by governance token holders.\n\nIn the Archway model, dapp developers can redistribute their share of network rewards directly to their governance token holders, subject to local securities laws. This transforms standard governance tokens into productive, yield-generating assets.\n\nWhile individual dapps on other networks, such as SushiSwap, have implemented similar functionality, the Archway protocol makes it possible to implement and manage governance rewards at the protocol level. A developer can opt-in and automatically redirect to governance token holders the funds earned by the dapp, including gas rebates, inflation rewards, and even smart contract fees.\n\n#### Support the Core Development Team\n\nRewards offered by Archway can help developers bootstrap new projects without having to dedicate excessive time and focus to fundraising. The process of raising early capital can be difficult for developers of individual dapps.\n\nDevelopment teams often resort to private insider sales that skew early token distribution or they are forced to rely on foundation grant programs. Rather than prioritizing the best technology and ecosystem for their dapp, developers often choose a tech stack that is based on available grants and are then locked into a single platform.\n\nEven after a dapp is launched, developers continuing to support the dapp codebase may find it difficult to cover ongoing development costs as the blockchain industry is still nascent and successful business models have yet to materialize.\n\nThe model introduced by Archway can counter some of these early financial pressures by allocating dapp rewards directly to core development teams. This funding source can serve as a supplement to help sustain projects and allow the team to focus on what really matters — shipping the best possible product, growing their user base, and supporting the community.\n\n#### Subsidize Gas Payments\n\nGas payments remain one of the critical barriers to delivering a simple, intuitive user experience for dapps. Archway supports gasless transactions through the use of pool accounts. A dapp can pull funds from a common pool to sponsor gas payments and completely abstract away that complexity and friction for its end users.\n\nTo fund the pool account balance, a developer can use the fees and rewards generated by the dapp. In effect, the dapp gets a 50% discount on each transaction from gas rebates along with inflation rewards and contract fees that are potentially available as a bonus.\n\nBy recycling these funds, dapps have the option to dramatically reduce or eliminate the gas burden for end users, leading to a smoother onboarding process and stronger retention over time.\n\n#### Boost Liquidity Mining Programs\n\nDeFi projects can use the funds earned from Archway to boost liquidity mining rewards, fulfilling a vital strategy for attracting new users and encouraging active participation.\n\nFor instance, a decentralized exchange (DEX) can be designed to distribute rewards on top of the fees already paid to its liquidity providers (LPs), while a lending platform can allow users to earn supplemental rewards for depositing and borrowing assets.\n\nAlthough similar matching and subsidy programs have been run elsewhere as temporary months-long promotions, the steady drip of Archway rewards creates unique opportunities to serve as a continual source for boosted incentives.\n\n#### Fund a Decentralized Autonomous Organization (DAO)\n\nRewards generated by a dapp can be contributed to a community-owned DAO that is focused on coordinating and funding critical work for its ecosystem. These rewards can be continuously deposited to the DAO treasury that allows members to collectively manage and deploy assets based on the specific needs of the project.\n\nThis DAO could then vote to fund core development teams, sponsor events and hackathons, commission code audits, open bug bounties, launch education programs, subsidize third-party integrations, and so on. DAO funding could be available for anything and everything that could potentially benefit and impact the ecosystem.\n\nThe DAO itself can exist and operate as a set of smart contracts on top of Archway, so the entire process is automated and transparent throughout initial rewards collection, voting, grants distribution, and so on.\n\nGiving members collective control over a recurring funding source helps to actively engage the dapp’s community and contributes toward progressively decentralizing the project itself.\n\n#### Reduce DEX Fees\n\nOn networks such as Ethereum, DEX users incur two sets of fees: a network fee and a swap fee. The network fee incentivizes miners to operate nodes and the swap fee incentivizes liquidity providers (LPs) to provide liquidity.\n\nBy deploying to Archway, DEXs could be constructed to effectively eliminate one of the network or swap fees. Instead, the DEX protocol could redistribute the earned gas rebates back to the LPs for providing liquidity to dramatically lower total transaction costs on automatic swaps and improve the user experience.\n\n<!-- Governance -->\n\n## Governance\n\nGovernance is the process by which Archway network participants and token holders can influence the future direction of the protocol through proposals and on-chain voting.\n\nIn addition to fees and staking, Archway’s native token is used for governance. This governance model helps maintain and support Archway’s decentralized community while ensuring fair and transparent participation. All holders of the native token can propose changes to the Archway protocol and vote on active proposals. Proposals that reach a consensus threshold are adopted.',
    modified: 1678275989.411273,
    group: 'overview',
    viewed: 13,
    objectID: 'overview|about',
    _highlightResult: {
      title: { value: 'About Archway', matchLevel: 'none', matchedWords: [] },
      description: {
        value: 'Provides an overview of Archway, a smart contract platform built on CosmWasm',
        matchLevel: 'none',
        matchedWords: [],
      },
      content: {
        value:
          "# About Archway\n\nArchway is an incentivized smart contract platform that rewards developers for building on the network with baked-in incentives and rewards.\n\nThe protocol provides developers with the tools to quickly build and launch scalable cross-chain dapps and receive rewards for the value that the dApps contribute to the network.\n\n## The Archway Mission\n\nThe overarching goal of Archway is to foster an array of diverse and sustainable applications by empowering and rewarding developers who build on the network.\n\nThe internet has helped democratize access to information, but it hasn't fully democratized access to capital and value. The mission of Archway is to ensure that entrepreneurs and developers worldwide have access to opportunities comparable to those of their counterparts",
        matchLevel: 'none',
        matchedWords: [],
      },
      modified: { value: '1678275989.411273', matchLevel: 'none', matchedWords: [] },
      viewed: { value: '13', matchLevel: 'none', matchedWords: [] },
    },
  },
  {
    title: 'Monitoring Validators',
    description: 'Learn how to monitor your Validator effectively',
    parentSection: 'Run a node',
    content:
      '# Monitoring Validators\n\nThere is a <a href="https://grafana.com/" target="_blank" >Grafana</a> dashboard compatible with all the <a href="https://github.com/cosmos/cosmos-sdk" target="_blank" >cosmos-sdk</a> and <a href="https://github.com/tendermint/tendermint" target="_blank" >tendermint</a>-based blockchains.\n\n## Preview\n\n![](/images/docs/cosmos-overview.jpg)\n\nLet\'s set it up for our network.\n\n## Prerequisites\n\nFirst install <a href="https://grafana.com/" target="_blank" >Grafana</a> and <a href="https://prometheus.io/" target="_blank" >Prometheus</a> on your machine.\n\n## Enable Tendermint Metrics\n\n::highlight-card\n\n```bash\nsed -i \'s/prometheus = false/prometheus = true/g\' <YOUR-NODE-HOMEDIR>/config/config.toml\n```\n\n::\nAfter restarting your node, you should be able to access the `tendermint` metrics(default port is 26660): <http://localhost:26660>\n\n## Configure Prometheus Targets\n\nFind `prometheus.yml` file and append the following `job` under the `scrape_configs`:\n\n```yaml\n- job_name: archway\n  static_configs:\n    - targets: [\'localhost:26660\']\n      labels:\n        instance: validator\n```\n\n**Note:** On linux machines this file can be found under this path: `/etc/prometheus/prometheus.yml`\n\n## Resolving Port Conflicts\n\nIf you run your `archway` network and `Prometheus` on the same machine, you will see one of them cannot run due to a port conflict. Let\'s resolve it.\n\n**Open the `./node-main/config/app.toml` file and look for**\n\n```toml\n[grpc]\naddress = "0.0.0.0:9090"\n```\n\nThen change the port to something else like this:\n\n```toml\n[grpc]\naddress = "0.0.0.0:9095"\n```\n\n## Restart Prometheus\n\n::highlight-card\n\n```bash\nsudo service prometheus restart\n```\n\n::\nCheck the status if the prometheus service is running properly:\n::highlight-card\n\n```bash\nsystemctl status prometheus.service\n```\n\n::\n\nIf you see some output like this, it means it is running without an issue:\n\n```\n● prometheus.service - Monitoring system and time series database\n     Loaded: loaded (/lib/systemd/system/prometheus.service; enabled; vendor preset: enabled)\n     Active: active (running) since Wed 2021-10-06 15:32:48 CEST; 17min ago\n       Docs: https://prometheus.io/docs/introduction/overview/\n   Main PID: 457917 (prometheus)\n      Tasks: 21 (limit: 37746)\n     Memory: 48.3M\n     CGroup: /system.slice/prometheus.service\n             └─457917 /usr/bin/prometheus\n```\n\n## Configure Grafana\n\nif you have grafana installed on your machine, you can access it via navigating to this address: <http://localhost:3000>\n\nThe default username and password is `admin`.\n\nClick on config, then add a data source.\n\n![](/images/docs/grafana01.png)\n\nThen select Prometheus from the list and add its URL.\n\n![](/images/docs/grafana02.png)\nIf you have installed it on your machine, the default URL is: <http://localhost:9090>\n\nClick on `Save & test` to make sure everything is alright.\n\n![](/images/docs/grafana03.png)\n\n## Import Grafana Dashboard\n\nCopy and paste the <a href="https://grafana.com/grafana/dashboards/11036" target="_blank" >Grafana Dashboard ID</a>`11036` and click on `Load` to complete importing.\n\n![](/images/docs/grafana04.png)\n\nNow you should be able to monitor your validator node.',
    modified: 1678275989.419273,
    group: 'validators',
    viewed: 10,
    objectID: 'validators|monitoring-validators',
    _highlightResult: {
      title: { value: 'Monitoring Validators', matchLevel: 'none', matchedWords: [] },
      description: { value: 'Learn how to monitor your Validator effectively', matchLevel: 'none', matchedWords: [] },
      content: {
        value:
          '# Monitoring Validators\n\nThere is a <a href="https://grafana.com/" target="_blank" >Grafana</a> dashboard compatible with all the <a href="https://github.com/cosmos/cosmos-sdk" target="_blank" >cosmos-sdk</a> and <a href="https://github.com/tendermint/tendermint" target="_blank" >tendermint</a>-based blockchains.\n\n## Preview\n\n![](/images/docs/cosmos-overview.jpg)\n\nLet\'s set it up for our network.\n\n## Prerequisites\n\nFirst install <a href="https://grafana.com/" target="_blank" >Grafana</a> and <a href="https://prometheus.io/" target="_blank" >Prometheus</a> on your machine.\n\n## Enable Tendermint Metrics\n\n::highlight-card\n\n```bash\nsed -i \'s/prometheus = false/prometheus = true/g\' <YOUR-NODE-HOMEDIR>/config/config.toml\n```\n\n::\nAfter restarting your node, you should be able to access the `tendermint` metrics(default port is 26660): <http://localhost:26660>\n\n## Configure Prometheus Targets\n\nFind `prometheus.yml` file and append the following `job` under the `scrape_configs`:\n\n```yaml\n- job_name: archway\n  static_configs:\n    - targets: [\'localhost:26660\']\n      labels:\n        instance: validator\n```\n\n**Note:** On linux machines this file can be found under this path: `/etc/prometheus/prometheus.yml`\n\n## Resolving Port Conflicts\n\nIf you run your `archway` network and `Prometheus` on the same machine, you will see one of them cannot run due to a port conflict. Let\'s resolve it.\n\n**Open the `./node-main/config/app.toml` file and look for**\n\n```toml\n[grpc]\naddress = "0.0.0.0:9090"\n```\n\nThen change the port to something else like this:\n\n```toml\n[grpc]\naddress = "0.0.0.0:9095"\n```\n\n## Restart Prometheus\n\n::highlight-card\n\n```bash\nsudo service prometheus restart\n```\n\n::\nCheck the status if the prometheus service is running properly:\n::highlight-card\n\n```bash\nsystemctl status prometheus.service\n```\n\n::\n\nIf you see some output like this, it means it is running without an issue:\n\n```\n● prometheus.service - Monitoring system and time series database\n     Loaded: loaded (/lib/systemd/system/prometheus.service; enabled; vendor preset: enabled)\n     Active: active (running) since Wed 2021-10-06 15:32:48 CEST; 17min ago\n       Docs: https://prometheus.io/docs/introduction/overview/\n   Main PID: 457917 (prometheus)\n      Tasks: 21 (limit: 37746)\n     Memory: 48.3M\n     CGroup: /system.slice/prometheus.service\n             └─457917 /usr/bin/prometheus\n```\n\n## Configure Grafana\n\nif you have grafana installed on your machine, you can access it via navigating to this address: <http://localhost:3000>\n\nThe default username and password is `admin`.\n\nClick on config, then add a data source.\n\n![](/images/docs/grafana01.png)\n\nThen select Prometheus from the list and add its URL.\n\n![](/images/docs/grafana02.png)\nIf you have installed it on your machine, the default URL is: <http://localhost:9090>\n\nClick on `Save & test` to make sure everything is alright.\n\n![](/images/docs/grafana03.png)\n\n## Import Grafana Dashboard\n\nCopy and paste the <a href="https://grafana.com/grafana/dashboards/11036" target="_blank" >Grafana Dashboard ID</a>`11036` and click on `Load` to complete importing.\n\n![](/images/docs/grafana04.png)\n\nNow you should be able to monitor your validator node.',
        matchLevel: 'none',
        matchedWords: [],
      },
      modified: { value: '1678275989.419273', matchLevel: 'none', matchedWords: [] },
      viewed: { value: '10', matchLevel: 'none', matchedWords: [] },
    },
  },
];
